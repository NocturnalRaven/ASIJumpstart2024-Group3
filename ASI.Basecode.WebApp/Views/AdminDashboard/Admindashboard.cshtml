@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bookings Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="~/css/style.css" asp-append-version="true" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <main class="mainBody">
        <div class="mainBodyInner">
            <aside class="calendarSide">
                <div id="calendar"></div>
                <div class="recentBookingsOverall">
                    <p class="recentBookingsAside">Recent Bookings</p>
                    <div class="recentBookingsOverallInner" id="recentBookingsContainer">
                        <!-- Recent Bookings will be rendered here -->
                    </div>
                </div>
            </aside>
            <div class="mainContent">
                <div class="bookingsDashboard">
                    <div class="bookingsDashboardHeader">
                        <p class="bookingsDashboardTitle">Bookings</p>
                        <div class="headerActions">
                            <button class="btn btn-primary btn-sm addBookingBtn" type="button" data-bs-toggle="modal" data-bs-target="#addBookingModal">
                                <i class="bi bi-plus-square me-2"></i> Add Booking
                            </button>
                            <i class="bi bi-filter ms-3"></i>
                        </div>
                    </div>
                    <div class="table-wrapper">
                        <table class="table table-striped align-middle" id="bookingsTable">
                            <thead>
                                <tr>
                                    <th scope="col">User ID</th>
                                    <th scope="col">User Name</th>
                                    <th scope="col">Room ID</th>
                                    <th scope="col">Room Name</th>
                                    <th scope="col">Date</th>
                                    <th scope="col">No. of People</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Bookings will be rendered here -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Pending Bookings Table -->
                <div class="bookingsDashboardLower">
                    <div class="dashboardPending">
                        <div class="bookingsDashboardHeader">
                            <p class="bookingsDashboardTitle">Pending Bookings</p>
                            <i class="bi bi-filter"></i>
                        </div>
                        <div class="table-wrapper">
                            <table class="table table-striped align-middle" id="pendingsTable">
                                <thead>
                                    <tr>
                                        <th scope="col">User ID</th>
                                        <th scope="col">User Name</th>
                                        <th scope="col">Room ID</th>
                                        <th scope="col">Room Name</th>
                                        <th scope="col">Date</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Pending Bookings will be rendered here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Analytics Section -->
            <div class="dashboardAnalytics">
                <div class="analytics-card">
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="bookingsDashboardTitle">Analytics</p>
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle btn-sm analyticsDropdown" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                All Time
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item active" href="#">All Time</a></li>
                                <li><a class="dropdown-item" href="#">Day</a></li>
                                <li><a class="dropdown-item" href="#">Week</a></li>
                                <li><a class="dropdown-item" href="#">Month</a></li>
                                <li><a class="dropdown-item" href="#">Year</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="chart-container">
                        <canvas id="analyticsChart"></canvas>
                    </div>
                    <div class="legend-container">
                        <div class="legend-item"><div class="legend-color meeting-room"></div><span>Meeting Room</span></div>
                        <div class="legend-item"><div class="legend-color event-venue"></div><span>Event Venue</span></div>
                        <div class="legend-item"><div class="legend-color unit"></div><span>Unit</span></div>
                        <div class="legend-item"><div class="legend-color apartment"></div><span>Apartment</span></div>
                    </div>
                </div>
            </div>

            <!-- Add Booking Modal -->
            <div class="modal fade" id="addBookingModal" tabindex="-1" aria-labelledby="addBookingModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addBookingModalLabel">Add Booking</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="addBookingForm">
                                <div class="mb-3">
                                    <label for="addBookingUser" class="form-label">User</label>
                                    <select class="form-select" id="addBookingUser" required>
                                        <!-- User options will be filled dynamically -->
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="addBookingRoom" class="form-label">Room</label>
                                    <select class="form-select" id="addBookingRoom" required>
                                        <!-- Room options will be filled dynamically -->
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="addBookingDate" class="form-label">Date</label>
                                    <input type="date" class="form-control" id="addBookingDate" required min="<?= date('Y-m-d') ?>">
                                </div>
                                <div class="mb-3">
                                    <label for="addBookingStartTime" class="form-label">Start Time</label>
                                    <input type="time" class="form-control" id="addBookingStartTime" required>
                                </div>
                                <div class="mb-3">
                                    <label for="addBookingEndTime" class="form-label">End Time</label>
                                    <input type="time" class="form-control" id="addBookingEndTime" required>
                                </div>
                                <div class="mb-3">
                                    <label for="addBookingPeople" class="form-label">No. of People</label>
                                    <input type="number" class="form-control" id="addBookingPeople" min="1" required>
                                </div>
                                <div class="mb-3">
                                    <label for="addBookingStatus" class="form-label">Status</label>
                                    <select class="form-select" id="addBookingStatus" required>
                                        <option value="Confirmed">Confirmed</option>
                                        <option value="Pending">Pending</option>
                                        <option value="Canceled">Canceled</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="addBookingRecurring" class="form-label">Recurring</label>
                                    <input type="checkbox" id="addBookingRecurring">
                                </div>
                                <div class="mb-3" id="frequencySection" style="display: none;">
                                    <label for="addBookingFrequency" class="form-label">Frequency</label>
                                    <select class="form-select" id="addBookingFrequency">
                                        <option value="Daily">Daily</option>
                                        <option value="Weekly">Weekly</option>
                                        <option value="Monthly">Monthly</option>
                                    </select>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="addBooking()">Add Booking</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Booking Modal -->
            <div class="modal fade" id="editBookingModal" tabindex="-1" aria-labelledby="editBookingModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editBookingModalLabel">Edit Booking</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editBookingForm">
                                <div class="mb-3">
                                    <label for="bookingUserInput" class="form-label">User</label>
                                    <select class="form-select" id="bookingUserInput" required>
                                        <!-- User options will be filled dynamically -->
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="bookingRoomInput" class="form-label">Room</label>
                                    <select class="form-select" id="bookingRoomInput" required>
                                        <!-- Room options will be filled dynamically -->
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="bookingDateInput" class="form-label">Date</label>
                                    <input type="date" class="form-control" id="addBookingDate" required min="<?= date('Y-m-d') ?>">
                                </div>
                                <div class="mb-3">
                                    <label for="bookingStartTimeInput" class="form-label">Start Time</label>
                                    <input type="time" class="form-control" id="bookingStartTimeInput" required>
                                </div>
                                <div class="mb-3">
                                    <label for="bookingEndTimeInput" class="form-label">End Time</label>
                                    <input type="time" class="form-control" id="bookingEndTimeInput" required>
                                </div>
                                <div class="mb-3">
                                    <label for="bookingPeopleInput" class="form-label">No. of People</label>
                                    <input type="number" class="form-control" id="bookingPeopleInput" min="1" required>
                                </div>
                                <div class="mb-3">
                                    <label for="bookingStatusInput" class="form-label">Status</label>
                                    <select class="form-select" id="bookingStatusInput" required>
                                        <option value="Confirmed">Confirmed</option>
                                        <option value="Pending">Pending</option>
                                        <option value="Canceled">Canceled</option>
                                    </select>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" id="saveChangesBtn">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- JS Libraries -->
            <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
            <script>
                let bookingsData = []; // Global variable to store fetched bookings
                let analyticsChart;
                let bookingDates = []; // Array to store unique booking dates
                let selectedRoomCapacity = 0;

                async function fetchBookings() {
                    try {
                        const response = await fetch('/api/bookings/GetAllBookings');
                        if (!response.ok) throw new Error("Failed to load bookings");

                        const usersResponse = await fetch('/api/bookings/GetAllUsers');
                        const roomsResponse = await fetch('/api/bookings/GetAllRooms');

                        const users = await usersResponse.json();
                        const rooms = await roomsResponse.json();
                        const bookings = await response.json();

                        bookingsData = bookings.map(booking => {
                            const user = users.find(user => user.id === booking.userId);
                            const room = rooms.find(room => room.roomId === booking.roomId);

                            if (!user) console.warn(`User with ID ${booking.userId} not found`);
                            if (!room) console.warn(`Room with ID ${booking.roomId} not found`);

                            // Add booking date to bookingDates array if not already present
                            const bookingDate = new Date(booking.startDate).toISOString().split("T")[0];
                            if (!bookingDates.includes(bookingDate)) {
                                bookingDates.push(bookingDate);
                            }

                            return {
                                ...booking,
                                userName: user ? user.name : 'Unknown User',
                                roomName: room ? room.name : 'Unknown Room'
                            };
                        });

                        renderBookings(bookingsData);
                        renderRecentBookings(bookingsData);
                        renderPendings(bookingsData);
                        populateUserAndRoomSelect(users, rooms);
                        updateAnalyticsChart();
                        updateCalendarWithBookings();
                    } catch (error) {
                        console.error(error.message);
                    }
                }

                function updateAnalyticsChart() {
                    const roomTypeCounts = bookingsData.reduce((acc, booking) => {
                        acc[booking.roomType] = (acc[booking.roomType] || 0) + 1;
                        return acc;
                    }, {});

                    const roomTypes = Object.keys(roomTypeCounts);
                    const counts = Object.values(roomTypeCounts);

                    // Destroy existing chart instance if it exists
                    if (analyticsChart) {
                        analyticsChart.destroy();
                    }

                    const ctx = document.getElementById('analyticsChart').getContext('2d');
                    analyticsChart = new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: roomTypes,
                            datasets: [{
                                label: 'Bookings by Room Type',
                                data: counts,
                                backgroundColor: ['#6848FF', '#AFAEFF', '#E6DEFF', '#F3F0FF'],
                                borderWidth: 0
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                tooltip: {
                                    callbacks: {
                                        label: function (tooltipItem) {
                                            const label = roomTypes[tooltipItem.dataIndex] || '';
                                            const value = counts[tooltipItem.dataIndex];
                                            return `${label}: ${value}`;
                                        }
                                    }
                                },
                                legend: { display: false }
                            }
                        }
                    });
                }
                function populateUserAndRoomSelect(users, rooms) {
                    const addBookingUserSelect = document.getElementById('addBookingUser');
                    const bookingUserInputSelect = document.getElementById('bookingUserInput');
                    const addBookingRoomSelect = document.getElementById('addBookingRoom');
                    const bookingRoomInputSelect = document.getElementById('bookingRoomInput');

                    // Populate user options
                    users.forEach(user => {
                        const optionText = `${user.id} - ${user.name}`;
                        const option = new Option(optionText, user.id);
                        addBookingUserSelect.add(option);
                        bookingUserInputSelect.add(option.cloneNode(true));
                    });

                    // Populate room options and add data attributes
                    rooms.forEach(room => {
                        const optionText = `${room.roomId} - ${room.name}`;
                        const option = new Option(optionText, room.roomId);

                        // Assign capacity with a fallback if undefined
                        const capacity = room.capacity || 0;
                        option.dataset.capacity = capacity;

                        console.log(`Setting capacity for room ${room.roomId} as ${capacity}`); // Debug log

                        addBookingRoomSelect.add(option);
                        bookingRoomInputSelect.add(option.cloneNode(true));
                    });

                    // Add event listener to update capacity display on room selection change
                    addBookingRoomSelect.addEventListener('change', updateRoomCapacityDisplay);
                }

                function renderBookings(bookings) {
                    const tbody = document.querySelector('#bookingsTable tbody');
                    tbody.innerHTML = '';

                    // Filter out archived bookings to exclude them from the bookings table
                    const activeBookings = bookings.filter(booking => booking.status !== 'Archived');

                    activeBookings.forEach(booking => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                                            <td>${booking.userId}</td>
                                            <td>${booking.userName}</td>
                                            <td>${booking.roomId}</td>
                                            <td>${booking.roomName}</td>
                                            <td>${new Date(booking.startDate).toLocaleDateString()}</td>
                                            <td>${booking.noOfPeople}</td>
                                            <td>
                                                <button class="btn btn-primary btn-sm" onclick="viewBooking(${booking.bookingId})">View</button>
                                                <button class="btn btn-info btn-sm" onclick="editBooking(${booking.bookingId}, ${booking.userId}, ${booking.roomId}, '${booking.startDate}', '${booking.endDate}', ${booking.noOfPeople}, '${booking.status}')">Edit</button>
                                                <button class="btn btn-danger btn-sm" onclick="cancelBooking(${booking.bookingId})">Cancel</button>
                                            </td>`;
                        tbody.appendChild(row);
                    });
                }


                function renderRecentBookings(bookings) {
                    const container = document.querySelector('#recentBookingsContainer');
                    container.innerHTML = '';

                    bookings.slice(0, 3).forEach(booking => {
                        const bookingHTML = `
                                                                            <div class="recentBookings">
                                                                            <p class="userRecentBookings">${booking.userName}</p>
                                                                            <hr>
                                                                                <div class="recentBookingsDetailsDiv">
                                                                                    <div class="recentBookingsDetails">
                                                                                        <i class="bi bi-house-door-fill"></i>
                                                                                        <p>${booking.roomName}</p>
                                                                                    </div>
                                                                                    <div class="recentBookingsDetails">
                                                                                        <i class="bi bi-calendar2-week"></i>
                                                                                        <p>${new Date(booking.startDate).toLocaleDateString()}</p>
                                                                                    </div>
                                                                                </div>
                                                                           </div>`;
                        container.innerHTML += bookingHTML;
                    });
                }

                function renderPendings(bookings) {
                    const tbody = document.querySelector('#pendingsTable tbody');
                    tbody.innerHTML = '';

                    const pendingBookings = bookings.filter(booking => booking.status === "Pending");
                    pendingBookings.forEach(booking => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                                                                        <td>${booking.userName}</td>
                                                                        <td>${booking.roomName}</td>
                                                                        <td>${new Date(booking.startDate).toLocaleDateString()}</td>
                                                                        <td>
                                                                        <button class="btn btn-primary btn-sm" onclick="viewBooking(${booking.bookingId})">View</button>
                                                                        <button class="btn btn-info btn-sm" onclick="editBooking(${booking.bookingId}, ${booking.userId}, ${booking.roomId}, '${booking.startDate}', '${booking.endDate}', ${booking.noOfPeople}, '${booking.status}')">Edit</button>
                                                                        <button class="btn btn-danger btn-sm" onclick="cancelBooking(${booking.bookingId})">Cancel</button>
                                                                        </td>`;
                        tbody.appendChild(row);
                    });
                }

                async function addBooking() {
                    // Only proceed if the form is valid
                    if (!validateBookingForm('addBookingForm')) {
                        return;
                    }

                    const isRecurring = document.getElementById('addBookingRecurring').checked;
                    const frequency = isRecurring ? document.getElementById('addBookingFrequency').value : null;

                    const newBooking = {
                        userId: parseInt(document.getElementById('addBookingUser').value, 10),
                        roomId: parseInt(document.getElementById('addBookingRoom').value, 10),
                        startDate: document.getElementById('addBookingDate').value + "T" + document.getElementById('addBookingStartTime').value,
                        endDate: document.getElementById('addBookingDate').value + "T" + document.getElementById('addBookingEndTime').value,
                        noOfPeople: parseInt(document.getElementById('addBookingPeople').value, 10),
                        status: document.getElementById('addBookingStatus').value,
                        isRecurring,
                        frequency
                    };


                    try {
                        const response = await fetch('/api/bookings/AddBooking', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(newBooking)
                        });

                        if (response.ok) {
                            const roomId = newBooking.roomId;
                            await updateRoomStatus(roomId, "Booked");
                            $('#addBookingModal').modal('hide');
                            location.reload(); // Refresh the page after the booking is added
                        } else {
                            const errorText = await response.text();
                            alert("Error adding booking: " + errorText);
                        }
                    } catch (error) {
                        console.error("Network error:", error);
                        alert("Unexpected error adding booking.");
                    }
                }


                function editBooking(bookingId, userId, roomId, startDate, endDate, noOfPeople, status) {
                    document.getElementById('bookingUserInput').value = userId;
                    document.getElementById('bookingRoomInput').value = roomId;
                    document.getElementById('bookingDateInput').value = new Date(startDate).toISOString().split("T")[0];
                    document.getElementById('bookingStartTimeInput').value = new Date(startDate).toISOString().split("T")[1].slice(0, 5);
                    document.getElementById('bookingEndTimeInput').value = new Date(endDate).toISOString().split("T")[1].slice(0, 5);
                    document.getElementById('bookingPeopleInput').value = noOfPeople;
                    document.getElementById('bookingStatusInput').value = status;

                    document.getElementById('saveChangesBtn').onclick = async function () {
                        const updatedBooking = {
                            bookingId,
                            userId: parseInt(document.getElementById('bookingUserInput').value, 10),
                            roomId: parseInt(document.getElementById('bookingRoomInput').value, 10),
                            startDate: `${document.getElementById('bookingDateInput').value}T${document.getElementById('bookingStartTimeInput').value}`,
                            endDate: `${document.getElementById('bookingDateInput').value}T${document.getElementById('bookingEndTimeInput').value}`,
                            noOfPeople: parseInt(document.getElementById('bookingPeopleInput').value, 10),
                            status: document.getElementById('bookingStatusInput').value
                        };

                        await saveUpdatedBooking(updatedBooking);
                        $('#editBookingModal').modal('hide');
                    };

                    $('#editBookingModal').modal('show');
                }

                async function saveUpdatedBooking(updatedBooking) {
                    try {
                        const response = await fetch('/api/bookings/UpdateBooking', {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(updatedBooking)
                        });

                        if (response.ok) {
                            await fetchBookings();
                            alert("Booking updated successfully.");
                        } else {
                            const errorText = await response.text();
                            alert("Error updating booking: " + errorText);
                        }
                    } catch (error) {
                        console.error("Error updating booking:", error);
                    }
                }

                async function cancelBooking(bookingId) {
                    if (confirm("Are you sure you want to cancel this booking?")) {
                        try {
                            const booking = bookingsData.find(b => b.bookingId === bookingId);
                            if (!booking) {
                                alert("Booking not found.");
                                return;
                            }

                            const roomId = booking.roomId;

                            // First, delete the booking
                            const response = await fetch(`/api/bookings/DeleteBooking/${bookingId}`, { method: 'DELETE' });
                            if (response.ok) {
                                // Update the room status to "Available"
                                await updateRoomStatus(roomId, "Available");

                                // Refresh the bookings data
                                await fetchBookings();
                                alert("Booking canceled successfully and room is now available.");
                            } else {
                                alert("Error canceling booking.");
                            }
                        } catch (error) {
                            console.error("Error canceling booking:", error);
                            alert("An unexpected error occurred.");
                        }
                    }
                }


                async function viewBooking(bookingId) {
                    try {
                        const booking = bookingsData.find(b => b.bookingId === bookingId);

                        if (!booking) throw new Error("Booking not found in fetched data");

                        const bookingDate = new Date(booking.startDate).toLocaleDateString();
                        const startTime = new Date(booking.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                        const endTime = new Date(booking.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                        alert(`Booking Details:\nUser: ${booking.userName}\nRoom: ${booking.roomName}\nDate: ${bookingDate}\nStart Time: ${startTime}\nEnd Time: ${endTime}`);
                    } catch (error) {
                        console.error("Error viewing booking:", error);
                        alert("An error occurred while viewing booking details.");
                    }
                }


                async function editBooking(bookingId) {
                    try {
                        const response = await fetch(`/api/bookings/GetBookedRoomById/${bookingId}`);
                        if (!response.ok) throw new Error("Booking not found");

                        const booking = await response.json();

                        // Populate edit form with booking details
                        document.getElementById('bookingUserInput').value = booking.userId;
                        document.getElementById('bookingRoomInput').value = booking.roomId;
                        document.getElementById('bookingDateInput').value = new Date(booking.startDate).toISOString().split("T")[0];
                        document.getElementById('bookingStartTimeInput').value = new Date(booking.startDate).toISOString().split("T")[1].slice(0, 5);
                        document.getElementById('bookingEndTimeInput').value = new Date(booking.endDate).toISOString().split("T")[1].slice(0, 5);
                        document.getElementById('bookingPeopleInput').value = booking.noOfPeople;
                        document.getElementById('bookingStatusInput').value = booking.status;

                        document.getElementById('saveChangesBtn').onclick = async function () {
                            const updatedBooking = {
                                bookingId,
                                userId: parseInt(document.getElementById('bookingUserInput').value, 10),
                                roomId: parseInt(document.getElementById('bookingRoomInput').value, 10),
                                startDate: `${document.getElementById('bookingDateInput').value}T${document.getElementById('bookingStartTimeInput').value}`,
                                endDate: `${document.getElementById('bookingDateInput').value}T${document.getElementById('bookingEndTimeInput').value}`,
                                noOfPeople: parseInt(document.getElementById('bookingPeopleInput').value, 10),
                                status: document.getElementById('bookingStatusInput').value
                            };

                            await saveUpdatedBooking(updatedBooking);
                            $('#editBookingModal').modal('hide');
                        };

                        $('#editBookingModal').modal('show');
                    } catch (error) {
                        console.error("Error fetching booking for editing:", error);
                        alert("An error occurred while editing the booking.");
                    }
                }

                async function saveUpdatedBooking(updatedBooking) {
                    try {
                        const response = await fetch(`/api/bookings/UpdateBookedRoom/${updatedBooking.bookingId}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(updatedBooking)
                        });

                        if (response.ok) {
                            await fetchBookings();
                            alert("Booking updated successfully.");
                        } else {
                            const errorText = await response.text();
                            console.error("Failed to update booking:", errorText);
                            alert("Error updating booking: " + errorText);
                        }
                    } catch (error) {
                        console.error("Error updating booking:", error);
                    }
                }


                function updateCalendarWithBookings() {
                    flatpickr("#calendar", {
                        inline: true,
                        mode: "single",
                        dateFormat: "Y-m-d",
                        defaultDate: bookingDates,
                        onDayCreate: function (dObj, dStr, fp, dayElem) {
                            const dateStr = new Date(dayElem.dateObj.getTime() - dayElem.dateObj.getTimezoneOffset() * 60000)
                                .toISOString()
                                .split("T")[0];
                            if (bookingDates.includes(dateStr)) {
                                dayElem.classList.add("has-booking");
                            }
                        },
                        onChange: function (selectedDates) {
                            if (selectedDates.length > 0) {
                                const selectedDate = new Date(selectedDates[0].getTime() - selectedDates[0].getTimezoneOffset() * 60000)
                                    .toISOString()
                                    .split("T")[0];
                                showBookingsForDate(selectedDate);
                            }
                        }
                    });
                }


                // Helper function to update the room status to "Booked" without affecting other fields
                async function updateRoomStatus(roomId, status) {
                    try {
                        // Fetch the full room details to get all attributes
                        const roomResponse = await fetch(`/api/rooms/${roomId}`);

                        if (!roomResponse.ok) {
                            console.error("Failed to fetch room details for status update.");
                            alert("Error fetching room details before updating status.");
                            return;
                        }

                        const roomData = await roomResponse.json();

                        // Check the values of the room data before updating
                        console.log("Room data fetched before update:", roomData);

                        // Ensure we only modify the status field while preserving other attributes
                        roomData.status = status;

                        // Send back the full room data to preserve all properties
                        const updateResponse = await fetch(`/api/rooms/${roomId}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(roomData),
                        });

                        if (!updateResponse.ok) {
                            const errorText = await updateResponse.text();
                            console.error("Failed to update room status:", errorText);
                            alert(`Error updating room status: ${errorText}`);
                        } else {
                            console.log("Room status updated successfully:", roomData);
                        }
                    } catch (error) {
                        console.error("Error updating room status:", error);
                        alert("An unexpected error occurred while updating room status.");
                    }
                }

                function validateBookingForm(formId) {
                    const form = document.getElementById(formId);
                    let isValid = true;
                    let errorMessage = '';

                    // Validate user selection
                    const user = form.querySelector('#addBookingUser').value;
                    if (!user) {
                        errorMessage += 'User must be selected.\n';
                        isValid = false;
                    }

                    // Validate room selection and get updated room capacity
                    const roomSelect = form.querySelector('#addBookingRoom');
                    const room = roomSelect.value;
                    if (!room) {
                        errorMessage += 'Room must be selected.\n';
                        isValid = false;
                    } else {
                        // Retrieve the updated room capacity from the selected option's data attribute
                        selectedRoomCapacity = parseInt(roomSelect.options[roomSelect.selectedIndex].dataset.capacity, 10) || 0;
                    }

                    // Validate booking date and time
                    const date = form.querySelector('#addBookingDate').value;
                    const today = new Date().toISOString().split('T')[0];
                    const startTime = form.querySelector('#addBookingStartTime').value;
                    const endTime = form.querySelector('#addBookingEndTime').value;

                    // Get current date and time
                    const currentDateTime = new Date();
                    const currentDate = currentDateTime.toISOString().split('T')[0];
                    const currentTime = currentDateTime.toTimeString().slice(0, 5);

                    // Check if date is valid
                    if (!date) {
                        errorMessage += 'Booking date is required.\n';
                        isValid = false;
                    } else if (date === currentDate && startTime < currentTime) {
                        // If booking date is today, validate start time against current time
                        errorMessage += 'Start time cannot be in the past.\n';
                        isValid = false;
                    }

                    // Validate start and end time
                    if (!startTime) {
                        errorMessage += 'Start time is required.\n';
                        isValid = false;
                    } else if (!endTime) {
                        errorMessage += 'End time is required.\n';
                        isValid = false;
                    } else if (endTime <= startTime) {
                        errorMessage += 'End time must be after the start time.\n';
                        isValid = false;
                    }

                    // Validate number of people against updated room capacity
                    const noOfPeople = parseInt(form.querySelector('#addBookingPeople').value, 10);
                    if (isNaN(noOfPeople) || noOfPeople < 1) {
                        errorMessage += 'The number of people must be a valid number and at least 1.\n';
                        isValid = false;
                    } else if (noOfPeople > selectedRoomCapacity) {
                        errorMessage += `The number of people cannot exceed the room capacity of ${selectedRoomCapacity}.\n`;
                        isValid = false;
                    }

                    // Validate status selection
                    const status = form.querySelector('#addBookingStatus').value;
                    if (!status) {
                        errorMessage += 'Status is required.\n';
                        isValid = false;
                    }

                    // Check for duplicate booking in the same room, date, and overlapping time
                    const startDateTime = new Date(`${date}T${startTime}`).getTime();
                    const endDateTime = new Date(`${date}T${endTime}`).getTime();

                    const hasDuplicate = bookingsData.some(existingBooking => {
                        const existingRoomId = existingBooking.roomId;
                        const existingDate = new Date(existingBooking.startDate).toISOString().split("T")[0];
                        const existingStart = new Date(existingBooking.startDate).getTime();
                        const existingEnd = new Date(existingBooking.endDate).getTime();

                        return (
                            existingRoomId == room &&
                            existingDate === date &&
                            ((startDateTime >= existingStart && startDateTime < existingEnd) || // Overlaps with existing booking start
                                (endDateTime > existingStart && endDateTime <= existingEnd) ||     // Overlaps with existing booking end
                                (startDateTime <= existingStart && endDateTime >= existingEnd))    // Encloses existing booking
                        );
                    });

                    if (hasDuplicate) {
                        errorMessage += 'A booking already exists for this room with overlapping date and time.\n';
                        isValid = false;
                    }

                    if (!isValid) {
                        alert(errorMessage);
                    }

                    return isValid;
                }

                function updateRoomCapacityDisplay() {
                    const roomSelect = document.getElementById('addBookingRoom');
                    const selectedOption = roomSelect.options[roomSelect.selectedIndex];

                    // Parse the capacity value and log it
                    selectedRoomCapacity = parseInt(selectedOption.dataset.capacity, 10);
                    console.log(`Selected room capacity: ${selectedRoomCapacity}`); // Debug log

                    // Display room capacity to the user
                    let capacityDisplay = document.getElementById('capacityDisplay');
                    if (!capacityDisplay) {
                        capacityDisplay = document.createElement('div');
                        capacityDisplay.id = 'capacityDisplay';
                        capacityDisplay.className = 'text-muted';
                        roomSelect.parentElement.appendChild(capacityDisplay);
                    }
                    capacityDisplay.textContent = `Room Capacity: ${selectedRoomCapacity}`;
                }
                function showBookingsForDate(date) {
                    const selectedDate = new Date(date).toISOString().split("T")[0];

                    const filteredBookings = bookingsData.filter(booking => {
                        const bookingDate = new Date(new Date(booking.startDate).getTime() - new Date(booking.startDate).getTimezoneOffset() * 60000)
                            .toISOString()
                            .split("T")[0];
                        return bookingDate === selectedDate;
                    });

                    const bookingsContainer = document.getElementById("recentBookingsContainer");
                    bookingsContainer.innerHTML = '';

                    if (filteredBookings.length > 0) {
                        filteredBookings.forEach(booking => {
                            const bookingHTML = `
                                                                                                <div class="recentBookings">
                                                                                                    <p class="userRecentBookings">${booking.userName}</p>
                                                                                                    <hr>
                                                                                                    <div class="recentBookingsDetailsDiv">
                                                                                                        <div class="recentBookingsDetails">
                                                                                                            <i class="bi bi-house-door-fill"></i>
                                                                                                            <p>${booking.roomName}</p>
                                                                                                        </div>
                                                                                                        <div class="recentBookingsDetails">
                                                                                                            <i class="bi bi-calendar2-week"></i>
                                                                                                            <p>${new Date(booking.startDate).toLocaleDateString()}</p>
                                                                                                        </div>
                                                                                                        <div class="recentBookingsDetails">
                                                                                                            <i class="bi bi-clock"></i>
                                                                                                            <p>${new Date(booking.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${new Date(booking.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>
                                                                                                        </div>
                                                                                                    </div>
                                                                                                </div>`;
                            bookingsContainer.innerHTML += bookingHTML;
                        });
                    } else {
                        bookingsContainer.innerHTML = `<p class="text-muted">No bookings for this date.</p>`;
                    }
                }
                // Function to periodically check and archive expired bookings
                async function archiveExpiredBookings() {
                    const now = new Date();

                    const expiredBookings = bookingsData.filter(booking =>
                        new Date(booking.endDate) < now &&
                        booking.status !== 'Archived' &&
                        booking.isRecurring);

                    for (const booking of expiredBookings) {
                        try {
                            const updatedBooking = { ...booking, status: 'Archived' };

                            const response = await fetch(`/api/bookings/ArchiveBooking/${booking.bookingId}`, {
                                method: 'PUT',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(updatedBooking)
                            });

                            if (response.ok) {
                                console.log(`Booking ${booking.bookingId} archived successfully.`);
                                bookingsData = bookingsData.filter(b => b.bookingId !== booking.bookingId);
                                renderBookings(bookingsData);
                            } else {
                                console.error(`Failed to archive booking ${booking.bookingId}`);
                            }
                        } catch (error) {
                            console.error(`Error archiving booking ${booking.bookingId}:`, error);
                        }
                    }
                }

                // Call this function periodically
                setInterval(archiveExpiredBookings, 10 * 60 * 1000); // Every 10 minutes

                document.getElementById('addBookingRecurring').addEventListener('change', function () {
                    document.getElementById('frequencySection').style.display = this.checked ? 'block' : 'none';
                });

                document.addEventListener("DOMContentLoaded", () => {
                    document.getElementById('addBookingDate').setAttribute('min', new Date().toISOString().split('T')[0]);
                    fetchBookings();
                    archiveExpiredBookings(); // Initial call to archive any expired bookings at load time
                });
            </script>
</body>
</html>