@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="~/css/style.css" asp-append-version="true" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <main class="mainBody mainBodyAdminAnalytics">
        <div class="mainBodyInner mainBodyInnerAdminAnalytics">
            <div class="bookingsDashboardLower">
                <div class="analytics-card">
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="bookingsDashboardTitle">Analytics</p>
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle btn-sm analyticsDropdown" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="analyticsFilterButton">
                                All Time
                            </button>
                            <ul class="dropdown-menu" id="analyticsFilterOptions">
                                <li><a class="dropdown-item" href="#" data-filter="all">All Time</a></li>
                                <li><a class="dropdown-item" href="#" data-filter="day">Past Day</a></li>
                                <li><a class="dropdown-item" href="#" data-filter="week">Past Week</a></li>
                                <li><a class="dropdown-item" href="#" data-filter="month">Past Month</a></li>
                                <li><a class="dropdown-item" href="#" data-filter="year">Past Year</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="chart-container">
                        <canvas id="analyticsChart"></canvas>
                    </div>
                    <div class="legend-container">
                        <div class="legend-item">
                            <div class="legend-color meeting-room"></div>
                            <span>Meeting Room</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color event-venue"></div>
                            <span>Event Venue</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color unit"></div>
                            <span>Unit</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color apartment"></div>
                            <span>Apartment</span>
                        </div>
                    </div>
                </div>

            </div>
            <div class="mainContent mainContentAdminAnalytics">

                <div class="dashboardPending admin-analytics-bar-chart">
                    <div class="chart-container3">
                        <canvas id="barChart"></canvas>
                    </div>
                </div>
                <div class="bookingsDashboard">
                    <div class="chart-container3">
                        <canvas id="lineChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        let bookingsData = []; // Global variable to store bookings data
        let rooms = []; // Global variable to store rooms data

        // Fetch rooms data
        async function fetchRoomsData() {
            try {
                const response = await fetch('/api/bookings/GetAllRooms'); // Replace with your actual API endpoint
                if (!response.ok) throw new Error('Failed to fetch rooms data');
                rooms = await response.json();
            } catch (error) {
                console.error('Error fetching rooms:', error.message);
                alert('Failed to load room data.');
            }
        }

        // Fetch bookings data
        async function fetchBookingsData() {
            try {
                const response = await fetch('/api/bookings/GetAllBookings'); // Replace with your API endpoint
                if (!response.ok) throw new Error('Failed to fetch bookings data');
                bookingsData = await response.json();

                // Ensure both bookings and rooms are available before updating analytics
                await fetchRoomsData(); // Fetch rooms data
                updateAnalytics('all'); // Default filter
                updateCalendarHotspots();
            } catch (error) {
                console.error('Error fetching bookings:', error.message);
                alert('Failed to load analytics data.');
            }
        }

        // Update Analytics
        function updateAnalytics(filter) {
            const filteredBookings = filterBookings(filter);

            // Update Pie Chart (Requires both bookings and rooms)
            if (rooms.length > 0) {
                updatePieChart(filteredBookings, rooms);
            } else {
                console.warn('Rooms data is empty. Pie chart cannot be rendered.');
            }

            // Update Bar Chart
            updateBarChart(filteredBookings);

            // Update Line Chart
            updateLineChart(filteredBookings);
        }

        // Filter bookings based on the selected time period
        function filterBookings(filter) {
            const now = new Date();
            return bookingsData.filter(booking => {
                const bookingDate = new Date(booking.startDate);
                switch (filter) {
                    case 'day':
                        return (now - bookingDate) <= 86400000; // 1 day in ms
                    case 'week':
                        return (now - bookingDate) <= 604800000; // 1 week in ms
                    case 'month':
                        return (now - bookingDate) <= 2592000000; // 1 month in ms
                    case 'year':
                        return (now - bookingDate) <= 31536000000; // 1 year in ms
                    case 'all':
                    default:
                        return true;
                }
            });
        }

        // Update Calendar Hotspots
        function updateCalendarHotspots() {
            // Convert bookings start dates to local date strings
            const hotspotDates = bookingsData.map(booking => {
                const bookingDate = new Date(booking.startDate);
                return bookingDate.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD in local time
            });

            flatpickr("#calendar", {
                inline: true,
                mode: "single",
                dateFormat: "Y-m-d",
                onDayCreate: (dObj, dStr, fp, dayElem) => {
                    const dayDate = dayElem.dateObj.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD in local time

                    if (hotspotDates.includes(dayDate)) {
                        dayElem.style.backgroundColor = '#FFD700'; // Highlight hotspot dates
                    }
                }
            });
        }


        function updatePieChart(filteredBookings, rooms) {
            const roomStyleCategoryMapping = {
                'Classroom': 'Classroom',
                'Banquet': 'Banquet',
                'U-Shape': 'U-Shape',
                'Conference': 'Conference',
                'Auditorium': 'Auditorium',
                'Boardroom': 'Boardroom'
            };

            const categoryCounts = filteredBookings.reduce((acc, booking) => {
                const roomId = booking.roomId;

                const room = rooms.find(r => r.roomId === roomId);

                if (!room) {
                    acc['Unknown Category'] = (acc['Unknown Category'] || 0) + 1;
                    return acc;
                }

                const style = room.style || 'Unknown';
                const category = roomStyleCategoryMapping[style] || 'Unknown Category';
                acc[category] = (acc[category] || 0) + 1;

                return acc;
            }, {});

            const data = {
                labels: Object.keys(categoryCounts),
                datasets: [{
                    data: Object.values(categoryCounts),
                    backgroundColor: ['#6848FF', '#AFAEFF', '#E6DEFF', '#F3F0FF', '#FFD700', '#FF5733']
                }]
            };

            if (window.pieChartInstance) {
                window.pieChartInstance.destroy();
            }

            const ctx = document.getElementById('analyticsChart').getContext('2d');
            window.pieChartInstance = new Chart(ctx, {
                type: 'pie',
                data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false, // Allow chart to resize freely
                    plugins: {
                        legend: {
                            display: true,
                            labels: {
                                color: '#000',
                                font: {
                                    size: 14
                                }
                            }
                        }
                    }
                }
            });

            updateLegends(Object.keys(categoryCounts));
        }

        // Function to update legends dynamically
        function updateLegends(categories) {
            const legendContainer = document.querySelector('.legend-container');
            legendContainer.innerHTML = ''; // Clear existing legends

            categories.forEach((category, index) => {
                const color = ['#6848FF', '#AFAEFF', '#E6DEFF', '#F3F0FF', '#FFD700', '#FF5733'][index];

                const legendItem = `
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: ${color};"></div>
                                <span>${category}</span>
                            </div>
                        `;
                legendContainer.innerHTML += legendItem;
            });
        }


        function updateBarChart(filteredBookings) {
            const dayCounts = filteredBookings.reduce((acc, booking) => {
                const day = new Date(booking.startDate).toLocaleDateString('en-US', { weekday: 'long' });
                acc[day] = (acc[day] || 0) + 1;
                return acc;
            }, {});

            const data = {
                labels: Object.keys(dayCounts),
                datasets: [{
                    label: 'Most Booked Days',
                    data: Object.values(dayCounts),
                    backgroundColor: '#9fa8da'
                }]
            };

            const ctx = document.getElementById('barChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data,
                options: {
                    responsive: true,
                    maintainAspectRatio: true, // Maintain aspect ratio
                    aspectRatio: 2, // Adjust this value as needed
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }


        function updateLineChart(filteredBookings) {
            const hourCounts = filteredBookings.reduce((acc, booking) => {
                const hour = new Date(booking.startDate).getHours();
                acc[hour] = (acc[hour] || 0) + 1;
                return acc;
            }, {});

            const data = {
                labels: Object.keys(hourCounts).map(hour => `${hour}:00`),
                datasets: [{
                    label: 'Most Booked Hours',
                    data: Object.values(hourCounts),
                    borderColor: 'blue',
                    fill: false
                }]
            };

            const ctx = document.getElementById('lineChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data,
                options: {
                    responsive: true,
                    maintainAspectRatio: true, // Maintain aspect ratio
                    aspectRatio: 2, // Adjust this value as needed
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }


        // Event Listener for Analytics Filter
        document.getElementById('analyticsFilterOptions').addEventListener('click', e => {
            if (e.target.tagName === 'A') {
                const filter = e.target.dataset.filter;
                document.getElementById('analyticsFilterButton').textContent = e.target.textContent;
                updateAnalytics(filter);
            }
        });

        // Fetch Data on Page Load
        fetchBookingsData();
    </script>
</body>
</html>
