@using static ASI.Basecode.Resources.Views.UserDashboard;
@using static ASI.Basecode.Resources.Views.Button;
@using static ASI.Basecode.Resources.Views.Modals;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html lang="en" style="overflow-x: hidden;">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" target="_blank" href="/css/style.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</head>

<body style="overflow-x: hidden;">
    <!-- Edit Profile Modal -->
    <div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProfileModalLabel">@EditProfileModal</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="userNameInput" class="form-label">Name</label>
                            <input type="text" class="form-control" id="userNameInput" value="Joshriel Mive">
                        </div>
                        <div class="mb-3">
                            <label for="userEmailInput" class="form-label">Email</label>
                            <input type="email" class="form-control" id="userEmailInput" value="mive@example.com">
                        </div>
                        <div class="mb-3">
                            <label for="userRoleInput" class="form-label">Role</label>
                            <input type="text" class="form-control" id="userRoleInput" value="Admin">
                        </div>
                        <div class="mb-3">
                            <label for="resetPasswordInput" class="form-label">@ResetPasswordModal</label>
                            <input type="password" class="form-control" id="resetPasswordInput">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@CloseButtonModal</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <main class="mainBodyUser">
        <div class="mainBodyInner">
            <!-- Calendar Section -->
            <aside class="calendarSide">
                <div id="calendar"></div>
                <div class="recentBookingsOverall">
                    <p class="recentBookingsAside">Bookings for Selected Date</p>
                    <div id="selectedDateBookings" class="recentBookingsOverallInner">
                        <p class="text-muted text-center">Select a date to view bookings.</p>
                    </div>
                </div>
            </aside>

            <!-- Room Section -->
            <section class="roomsSection mb-5">
                <div class="userDashboardRoomsCardViewParent">
                    <div class="usersRoomDashboard mb-2">
                        <h4>Rooms</h4>
                        <button class="btn adminAddBookingBtn btn-sm" type="button" data-bs-toggle="offcanvas" data-bs-target="#staticBackdrop" aria-controls="staticBackdrop">
                            <i class="bi bi-plus-square me-2"></i>Book
                        </button>
                    </div>
                    <div class="userDashboardRoomsCardView scrollable-rooms" id="roomsContainer">
                        <!-- Room cards will be dynamically rendered here -->
                    </div>
                </div>
            </section>

            <!-- Booking Table Section -->
            <section class="bookingsSection">
                <div class="userBookingsDashboard">
                    <div class="userBookingsDashboardHeader">
                        <p class="userBookingsDashboardTitle">Bookings</p>
                    </div>
                    <div class="table-wrapper">
                        <table class="table table-striped align-middle" id="userBookingsTable">
                            <thead>
                                <tr>
                                    <th scope="col">User</th>
                                    <th scope="col">Room</th>
                                    <th scope="col">Date</th>
                                    <th scope="col">No. of People</th>
                                    <th scope="col">Price</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Rows will be dynamically rendered here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </main>



        <div class="offcanvas offcanvas-end" data-bs-backdrop="static" tabindex="-1" id="staticBackdrop" aria-labelledby="staticBackdropLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="staticBackdropLabel">Book a Room</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <form id="bookingForm">
                    <!-- User Details Section -->
                    <div class="mb-3">
                        <label for="bookerName" class="form-label">Your Name</label>
                        <input type="text" class="form-control" id="bookerName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="bookerEmail" class="form-label">Your Email</label>
                        <input type="email" class="form-control" id="bookerEmail" readonly>
                    </div>

                    <!-- Room Details Section -->
                    <div class="mb-3">
                        <label for="roomName" class="form-label">Room Name</label>
                        <input type="text" class="form-control" id="roomName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="roomStyle" class="form-label">Meeting Room Style</label>
                        <input type="text" class="form-control" id="roomStyle" readonly>
                    </div>

                    <!-- Booking Details Section -->
                    <div class="mb-3">
                        <label for="bookingDate" class="form-label">Date</label>
                        <input type="date" class="form-control" id="bookingDate" required>
                    </div>
                    <div class="mb-3 timeDiv">
                        <div>
                            <label for="startTime" class="form-label">Start Time</label>
                            <input type="time" class="form-control" id="startTime" required>
                        </div>
                        <div>
                            <label for="endTime" class="form-label">End Time</label>
                            <input type="time" class="form-control" id="endTime" required>
                        </div>
                    </div>

                    <!-- Recurring Booking Section -->
                    <div class="mb-3">
                        <label for="isRecurring" class="form-label">Is this booking recurring?</label>
                        <select class="form-select" id="isRecurring" onchange="toggleFrequencyInput()">
                            <option value="No" selected>No</option>
                            <option value="Yes">Yes</option>
                        </select>
                    </div>
                    <div class="mb-3" id="recurringFrequencyContainer" style="display: none;">
                        <label for="recurringFrequency" class="form-label">Frequency</label>
                        <select class="form-select" id="recurringFrequency">
                            <option value="Daily">Daily</option>
                            <option value="Weekly">Weekly</option>
                            <option value="Monthly">Monthly</option>
                        </select>
                    </div>

                    <!-- Actions -->
                    <div class="buttonsOffCanvas">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="offcanvas">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-plus-square me-2"></i>Book Room
                        </button>
                    </div>
                </form>
            </div>
        </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        let selectedRoomId = null;
        let bookingsData = []; // Global variable to store bookings data
        let bookingDates = []; // Store dates with bookings

        document.addEventListener('DOMContentLoaded', () => {
            fetchUserBookings();
            fetchAndRenderRooms();
            populateUserDetails();
            initializeCalendar(); // Initialize calendar once bookings are fetched
            document.getElementById('bookingForm').addEventListener('submit', handleBookingSubmit);
        });

        function populateUserDetails() {
            const userName = '@(User.Identity.Name ?? User.Claims.FirstOrDefault(c => c.Type == "name")?.Value ?? "Guest")';
            const userEmail = '@(HttpContextAccessor.HttpContext.User.FindFirst("Email")?.Value ?? "unknown@example.com")';

            document.getElementById('bookerName').value = userName;
            document.getElementById('bookerEmail').value = userEmail;
        }

        async function fetchAndRenderRooms() {
            try {
                const response = await fetch('/api/bookings/GetAllRooms');
                if (!response.ok) throw new Error('Failed to fetch available rooms.');
                const rooms = await response.json();
                renderRooms(rooms);
            } catch (error) {
                console.error('Error fetching rooms:', error.message);
            }
        }

        function renderRooms(rooms) {
            const roomsContainer = document.getElementById('roomsContainer');
            roomsContainer.innerHTML = '';

            rooms.forEach(room => {
                const isAvailable = room.status === "Available";
                const roomCard = document.createElement('div');
                roomCard.classList.add('userDashboardRoomsCard');
                roomCard.innerHTML = `
                    <img src="${room.image || '/img/classroomStyle.jpg'}" class="userDashboardRoomsCardImg" alt="${room.name || 'Room'}">
                    <div class="userDashboardRoomsCardDetails">
                        <p class="userDashboardRoomsCardDetailsName">${room.name || 'Unnamed Room'}</p>
                        <div class="userDashboardRoomsCardDetailsInner mb-1">
                            <i class="bi bi-house-fill"></i>
                            <p>${room.style || 'Unknown Style'}</p>
                        </div>
                        <div class="userDashboardRoomsCardDetailsInner mb-3">
                            <i class="bi bi-people-fill"></i>
                            <p>${room.capacity || 'N/A'} pax</p>
                        </div>
                        <button class="btn adminAddBookingBtn btn-sm" type="button"
                            data-room-id="${room.roomId}"
                            data-room-name="${room.name}"
                            data-room-style="${room.style}"
                            data-bs-toggle="offcanvas"
                            data-bs-target="#staticBackdrop"
                            ${!isAvailable ? 'disabled' : ''}>
                            ${isAvailable ? 'Book' : 'Unavailable'}
                        </button>
                    </div>
                `;

                roomCard.querySelector('button').addEventListener('click', event => {
                    handleBookButtonClick(event.target.dataset);
                });

                roomsContainer.appendChild(roomCard);
            });
        }

        function handleBookButtonClick(roomData) {
            selectedRoomId = roomData.roomId;
            document.getElementById('roomName').value = roomData.roomName;
            document.getElementById('roomStyle').value = roomData.roomStyle;
        }

        async function handleBookingSubmit(event) {
            event.preventDefault();

            const bookingData = {
                userId: '@(User.Claims.FirstOrDefault(c => c.Type == "sub")?.Value)',
                userName: '@(User.Identity.Name ?? User.Claims.FirstOrDefault(c => c.Type == "name")?.Value)',
                roomId: selectedRoomId,
                startDate: document.getElementById('bookingDate').value,
                startTime: document.getElementById('startTime').value,
                endTime: document.getElementById('endTime').value,
                isRecurring: document.getElementById('isRecurring').value === 'Yes',
                frequency: document.getElementById('recurringFrequency').value || null,
            };

            try {
                const response = await fetch('/api/bookings/AddBooking', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookingData)
                });

                if (response.ok) {
                    alert('Booking successful!');
                    document.getElementById('bookingForm').reset();
                    document.querySelector('.btn-close').click();
                    fetchUserBookings(); // Refresh bookings and calendar
                } else {
                    const errorText = await response.text();
                    alert(`Booking failed: ${errorText}`);
                }
            } catch (error) {
                console.error('Error booking room:', error.message);
            }
        }

        async function fetchUserBookings() {
            try {
                const response = await fetch('/api/bookings/UserBookings');
                if (!response.ok) throw new Error('Failed to fetch user bookings.');

                const bookings = await response.json();
                bookingsData = bookings.map(booking => {
                    const bookingDate = new Date(booking.startDate).toISOString().split('T')[0];
                    if (!bookingDates.includes(bookingDate)) bookingDates.push(bookingDate);

                    return {
                        ...booking,
                        bookingDate,
                    };
                });

                initializeCalendar();
                renderBookingsForSelectedDate(); // Update the selected date bookings display
            } catch (error) {
                console.error('Error fetching user bookings:', error.message);
            }
        }

        function initializeCalendar() {
            flatpickr('#calendar', {
                inline: true,
                mode: 'single',
                dateFormat: 'Y-m-d',
                onDayCreate: (dObj, dStr, fp, dayElem) => {
                    const dateStr = dayElem.dateObj.toISOString().split('T')[0];
                    if (bookingDates.includes(dateStr)) {
                        dayElem.classList.add('has-booking');
                    }
                },
                onChange: (selectedDates) => {
                    if (selectedDates.length > 0) {
                        const selectedDate = selectedDates[0].toISOString().split('T')[0];
                        displayBookingsForDate(selectedDate);
                    }
                },
            });
        }

        function displayBookingsForDate(date) {
            const container = document.getElementById('selectedDateBookings');
            container.innerHTML = '';

            const bookingsForDate = bookingsData.filter(booking => booking.bookingDate === date);
            if (bookingsForDate.length === 0) {
                container.innerHTML = `<p class="text-muted text-center">No bookings for this date.</p>`;
            } else {
                bookingsForDate.forEach(booking => {
                    const bookingHTML = `
                        <div class="recentBookings">
                            <p class="userRecentBookings">${booking.userName || 'Unknown User'}</p>
                            <hr>
                            <div class="recentBookingsDetailsDiv">
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-house-door-fill"></i>
                                    <p>${booking.roomName || 'Unknown Room'}</p>
                                </div>
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-calendar2-week"></i>
                                    <p>${new Date(booking.startDate).toLocaleDateString()}</p>
                                </div>
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-clock"></i>
                                    <p>${new Date(booking.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${new Date(booking.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>
                                </div>
                            </div>
                        </div>
                    `;
                    container.innerHTML += bookingHTML;
                });
            }
        }
        function renderBookingsTable(bookings) {
            const tableBody = document.getElementById('userBookingsTable').querySelector('tbody');
            tableBody.innerHTML = '';

            bookings.forEach(booking => {
                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${booking.userName || 'Unknown User'}</td>
                        <td>${booking.roomName || 'Unknown Room'}</td>
                        <td>${new Date(booking.startDate).toLocaleDateString()}</td>
                        <td>${booking.noOfPeople || 'N/A'}</td>
                        <td>${booking.price || 'N/A'}</td>
                        <td>
                            <button class="btn btn-primary btn-sm" onclick="viewBooking(${booking.bookingId})">View</button>
                            <button class="btn btn-info btn-sm" onclick="editBooking(${booking.bookingId})">Edit</button>
                            <button class="btn btn-danger btn-sm" onclick="cancelBooking(${booking.bookingId})">Cancel</button>
                        </td>
                    `;
                tableBody.appendChild(row);
            });
        }
    </script>
</body>
</html>
