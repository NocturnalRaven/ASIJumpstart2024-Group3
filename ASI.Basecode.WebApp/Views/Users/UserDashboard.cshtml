@using static ASI.Basecode.Resources.Views.UserDashboard;
@using static ASI.Basecode.Resources.Views.Button;
@using static ASI.Basecode.Resources.Views.Modals;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html lang="en" style="overflow-x: hidden;">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" target="_blank" href="/css/style.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</head>

<body style="overflow-x: hidden;">
    <!-- Edit Profile Modal -->
    <div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProfileModalLabel">@EditProfileModal</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="userNameInput" class="form-label">Name</label>
                            <input type="text" class="form-control" id="userNameInput" value="Joshriel Mive">
                        </div>
                        <div class="mb-3">
                            <label for="userEmailInput" class="form-label">Email</label>
                            <input type="email" class="form-control" id="userEmailInput" value="mive@example.com">
                        </div>
                        <div class="mb-3">
                            <label for="userRoleInput" class="form-label">Role</label>
                            <input type="text" class="form-control" id="userRoleInput" value="Admin">
                        </div>
                        <div class="mb-3">
                            <label for="resetPasswordInput" class="form-label">@ResetPasswordModal</label>
                            <input type="password" class="form-control" id="resetPasswordInput">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@CloseButtonModal</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <main class="mainBodyUser">
        <div class="mainBodyInner">
            <!-- Calendar Section -->
            <aside class="calendarSide">
                <div id="calendar"></div>
                <div class="recentBookingsOverall">
                    <p class="recentBookingsAside">Bookings for Selected Date</p>
                    <div id="selectedDateBookings" class="recentBookingsOverallInner">
                        <p class="text-muted text-center">Select a date to view bookings.</p>
                    </div>
                </div>
            </aside>

            <!-- Room Section -->
            <section class="roomsSection mb-5">
                <div class="userDashboardRoomsCardViewParent">
                    <div class="usersRoomDashboard mb-2">
                        <h4>Rooms</h4>
                    </div>
                    <div class="userDashboardRoomsCardView scrollable-rooms" id="roomsContainer">
                        <!-- Room cards will be dynamically rendered here -->
                    </div>
                </div>
            </section>

            <!-- Booking Table Section -->
            <section class="bookingsSection">
                <div class="userBookingsDashboard">
                    <div class="userBookingsDashboardHeader">
                        <p class="userBookingsDashboardTitle">Bookings</p>
                    </div>
                    <div class="table-wrapper">
                        <table class="table table-striped align-middle" id="userBookingsTable">
                            <thead>
                                <tr>
                                    <th scope="col">User</th>
                                    <th scope="col">Room</th>
                                    <th scope="col">Date</th>
                                    <th scope="col">No. of People</th>
                                    <th scope="col">Price</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Rows will be dynamically rendered here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>



        <div class="offcanvas offcanvas-end" data-bs-backdrop="static" tabindex="-1" id="staticBackdrop" aria-labelledby="staticBackdropLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="staticBackdropLabel">Book a Room</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <form id="bookingForm">
                    <!-- User Details Section -->
                    <div class="mb-3">
                        <label for="bookerName" class="form-label">Your Name</label>
                        <input type="text" class="form-control" id="bookerName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="bookerEmail" class="form-label">Your Email</label>
                        <input type="email" class="form-control" id="bookerEmail" readonly>
                    </div>

                    <!-- Room Details Section -->
                    <div class="mb-3">
                        <label for="roomName" class="form-label">Room Name</label>
                        <input type="text" class="form-control" id="roomName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="roomStyle" class="form-label">Meeting Room Style</label>
                        <input type="text" class="form-control" id="roomStyle" readonly>
                    </div>

                    <!-- Booking Details Section -->
                    <div class="mb-3">
                        <label for="bookingDate" class="form-label">Date</label>
                        <input type="date" class="form-control" id="bookingDate" required>
                    </div>
                    <div class="mb-3 timeDiv">
                        <div>
                            <label for="startTime" class="form-label">Start Time</label>
                            <select class="form-control" id="startTime" required></select>
                        </div>
                        <div>
                            <label for="endTime" class="form-label">End Time</label>
                            <select class="form-control" id="endTime" required></select>
                        </div>
                    </div>
                    <!-- Recurring Booking Section -->
                    <div class="mb-3">
                        <label for="isRecurring" class="form-label">Is this booking recurring?</label>
                        <select class="form-select" id="isRecurring" onchange="toggleFrequencyInput()">
                            <option value="No" selected>No</option>
                            <option value="Yes">Yes</option>
                        </select>
                    </div>
                    <div class="mb-3" id="recurringFrequencyContainer" style="display: none;">
                        <label for="recurringFrequency" class="form-label">Frequency</label>
                        <select class="form-select" id="recurringFrequency">
                            <option value="Daily">Daily</option>
                            <option value="Weekly">Weekly</option>
                            <option value="Monthly">Monthly</option>
                        </select>
                    </div>

                    <!-- Actions -->
                    <div class="buttonsOffCanvas">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="offcanvas">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-plus-square me-2"></i>Book Room
                        </button>
                    </div>
                </form>
            </div>
        </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        let selectedRoomId = null;
        let bookingsData = []; // Global variable to store bookings data
        let bookingDates = []; // Store dates with bookings

        document.addEventListener('DOMContentLoaded', () => {
            fetchUserBookings();
            fetchAndRenderRooms();
            populateUserDetails();
            initializeCalendar(); // Initialize calendar once bookings are fetched
            populateTimeDropdowns();
            initializeBookingDateInput(); // Restrict the booking date input
            document.getElementById('bookingForm').addEventListener('submit', handleBookingSubmit);
        });


        function populateUserDetails() {
            const userName = '@(User.Identity.Name ?? User.Claims.FirstOrDefault(c => c.Type == "name")?.Value ?? "Guest")';
            const userEmail = '@(HttpContextAccessor.HttpContext.User.FindFirst("Email")?.Value ?? "unknown@example.com")';

            document.getElementById('bookerName').value = userName;
            document.getElementById('bookerEmail').value = userEmail;
        }

        async function fetchAndRenderRooms() {
            try {
                const response = await fetch('/api/bookings/GetAllRooms');
                if (!response.ok) throw new Error('Failed to fetch available rooms.');

                const rooms = await response.json();
                renderRooms(rooms);
            } catch (error) {
                console.error('Error fetching rooms:', error.message);
                alert('Could not fetch available rooms. Please try again later.');
            }
        }

        function renderRooms(rooms) {
            const roomsContainer = document.getElementById('roomsContainer');
            roomsContainer.innerHTML = ''; // Clear any existing content

            rooms.forEach(room => {
                const isAvailable = room.status === "Available";
                const roomCard = document.createElement('div');
                roomCard.classList.add('userDashboardRoomsCard');
                roomCard.innerHTML = `
                    <img src="${room.image || '/img/classroomStyle.jpg'}" class="userDashboardRoomsCardImg" alt="${room.name || 'Room'}">
                    <div class="userDashboardRoomsCardDetails">
                        <p class="userDashboardRoomsCardDetailsName">${room.name || 'Unnamed Room'}</p>
                        <div class="userDashboardRoomsCardDetailsInner mb-1">
                            <i class="bi bi-house-fill"></i>
                            <p>${room.style || 'Unknown Style'}</p>
                        </div>
                        <div class="userDashboardRoomsCardDetailsInner mb-3">
                            <i class="bi bi-people-fill"></i>
                            <p>${room.capacity || 'N/A'} pax</p>
                        </div>
                        <button class="btn adminAddBookingBtn btn-sm" type="button"
                            data-room-id="${room.roomId}"
                            data-room-name="${room.name || 'Unnamed Room'}"
                            data-room-style="${room.style || 'Unknown Style'}"
                            data-room-capacity="${room.capacity || 'N/A'}"
                            data-bs-toggle="offcanvas"
                            data-bs-target="#staticBackdrop"
                            ${!isAvailable ? 'disabled' : ''}>
                            ${isAvailable ? 'Book' : 'Unavailable'}
                        </button>
                    </div>
                `;

                // Attach click listener to the button
                const bookButton = roomCard.querySelector('button');
                bookButton.addEventListener('click', () => {
                    const roomId = bookButton.getAttribute('data-room-id');
                    const roomName = bookButton.getAttribute('data-room-name');
                    const roomStyle = bookButton.getAttribute('data-room-style');
                    const roomCapacity = bookButton.getAttribute('data-room-capacity');

                    if (!roomId) {
                        console.error("Room ID is missing. Unable to proceed with booking.");
                        alert("An error occurred. Please try again.");
                        return;
                    }

                    handleBookButtonClick({ roomId, roomName, roomStyle, roomCapacity });
                });

                roomsContainer.appendChild(roomCard);
            });
        }


        function handleBookButtonClick(roomData) {
            // Validate and assign room data
            if (!roomData || !roomData.roomId) {
                console.error("Invalid room data provided:", roomData);
                alert("Unable to retrieve room details. Please try again.");
                return;
            }

            selectedRoomId = roomData.roomId;

            // Populate room details in the booking modal
            document.getElementById('roomName').value = roomData.roomName || "Unknown Room";
            document.getElementById('roomStyle').value = roomData.roomStyle || "Unknown Style";

            console.log(`Room selected: ID=${roomData.roomId}, Name=${roomData.roomName}, Style=${roomData.roomStyle}, Capacity=${roomData.roomCapacity}`);
        }

        async function handleBookingSubmit(event) {
            event.preventDefault();

            const bookingDateInput = document.getElementById('bookingDate');
            if (!bookingDateInput.value) {
                alert('Please select a valid booking date.');
                return;
            }

            const bookingData = {
                userId: '@(HttpContextAccessor.HttpContext.User.FindFirst("UserId")?.Value ?? "0")',
                roomId: selectedRoomId,
                startDate: `${bookingDateInput.value}T${document.getElementById('startTime').value}`,
                endDate: `${bookingDateInput.value}T${document.getElementById('endTime').value}`,
                isRecurring: document.getElementById('isRecurring').value === 'Yes',
                frequency: document.getElementById('isRecurring').value === 'Yes' ? document.getElementById('recurringFrequency').value : null,
            };

            try {
                const response = await fetch('/api/bookings/AddBooking', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookingData),
                });

                if (response.ok) {
                    alert('Booking successful!');
                    document.getElementById('bookingForm').reset();
                    fetchUserBookings(); // Refresh bookings
                } else {
                    const errorText = await response.text();
                    alert(`Booking failed: ${errorText}`);
                }
            } catch (error) {
                console.error('Error booking room:', error.message);
                alert('Error occurred while booking. Please try again later.');
            }
        }

        async function fetchUserBookings() {
            try {
                // Fetch user bookings from the API
                const response = await fetch('/api/bookings/UserBookings');
                if (!response.ok) throw new Error("Failed to load user bookings");

                const usersResponse = await fetch('/api/bookings/GetAllUsers');
                const roomsResponse = await fetch('/api/bookings/GetAllRooms');

                const users = await usersResponse.json();
                const rooms = await roomsResponse.json();
                const bookings = await response.json();

                const userId = '@(HttpContextAccessor.HttpContext.User.FindFirst("UserId")?.Value ?? "0")'; // Replace this with the correct way to get userId in your app

                bookingsData = bookings
                    .filter(booking => booking.userId == userId) // Limit bookings to the logged-in user
                    .map(booking => {
                        const user = users.find(user => user.id === booking.userId);
                        const room = rooms.find(room => room.roomId === booking.roomId);

                        if (!room) console.warn(`Room with ID ${booking.roomId} not found`);

                        // Add booking date to bookingDates array if not already present
                        const bookingDate = new Date(booking.startDate).toISOString().split("T")[0];
                        if (!bookingDates.includes(bookingDate)) {
                            bookingDates.push(bookingDate);
                        }

                        return {
                            ...booking,
                            bookingDate,
                            userName: user ? user.name : 'Unknown User', // Assign user name
                            roomName: room ? room.name : 'Unknown Room', // Assign room name
                        };
                    });

                // Render updated data
                renderBookingsTable(bookingsData);
                displayBookingsForDate(bookingDate);

                // Display today's bookings by default
                const today = new Date().toISOString().split('T')[0];
                displayBookingsForDate(today);
            } catch (error) {
                console.error('Error fetching user bookings:', error.message);
                alert('Could not fetch your bookings. Please try again later.');
            }
        }



        function initializeCalendar() {
            flatpickr('#calendar', {
                inline: true,
                mode: 'single',
                dateFormat: 'Y-m-d',
                onDayCreate: (dObj, dStr, fp, dayElem) => {
                    const dateStr = dayElem.dateObj.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD in local time

                    // Highlight days with bookings
                    if (bookingDates.includes(dateStr)) {
                        dayElem.classList.add('has-booking'); // Add custom class to style these days
                    }
                },
                onChange: (selectedDates) => {
                    if (selectedDates.length > 0) {
                        const selectedDate = selectedDates[0].toLocaleDateString('en-CA'); // Format as YYYY-MM-DD in local time

                        // Display bookings for the selected date
                        const bookingsForDate = bookingsData.filter(
                            booking => new Date(booking.startDate).toLocaleDateString('en-CA') === selectedDate
                        );

                        if (bookingsForDate.length > 0) {
                            displayBookingsForDate(selectedDate); // Update the view with the selected date's bookings
                        } else {
                            displayBookingsForDate(selectedDate); // Ensures UI updates even if no bookings exist
                        }
                    }
                },
            });
        }



        function displayBookingsForDate(date) {
            const container = document.getElementById('selectedDateBookings');
            container.innerHTML = '';

            const bookingsForDate = bookingsData.filter(booking => booking.bookingDate === date);
            if (bookingsForDate.length === 0) {
                container.innerHTML = `<p class="text-muted text-center">No bookings for this date.</p>`;
            } else {
                bookingsForDate.forEach(booking => {
                    const startTime = new Date(booking.startDate);
                    const endTime = new Date(booking.endDate);
                    const duration = ((endTime - startTime) / 60000).toFixed(2); // Duration in minutes
                    const hours = Math.floor(duration / 60);
                    const minutes = duration % 60;
                    const formattedDuration = `${hours}h ${minutes}m`;

                    const bookingHTML = `
                        <div class="recentBookings">
                            <div class="recentBookingsDetailsDiv">
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-house-door-fill"></i>
                                    <p>${booking.roomName || 'Unknown Room'}</p>
                                </div>
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-calendar2-week"></i>
                                    <p>${startTime.toLocaleDateString()}</p>
                                </div>
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-clock"></i>
                                    <p>${startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${endTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>
                                </div>
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-hourglass-split"></i>
                                    <p>${formattedDuration}</p>
                                </div>
                            </div>
                        </div>
                    `;
                    container.innerHTML += bookingHTML;
                });
            }
        }

        function renderBookingsTable(bookings) {
            const tableBody = document.getElementById('userBookingsTable').querySelector('tbody');
            tableBody.innerHTML = '';

            bookings.forEach(booking => {
                const bookingDate = new Date(booking.startDate).toLocaleDateString();
                const startTime = new Date(booking.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const endTime = new Date(booking.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                const startDate = new Date(booking.startDate);
                const endDate = new Date(booking.endDate);
                const duration = Math.abs(endDate - startDate) / (1000 * 60); // Duration in minutes
                const hours = Math.floor(duration / 60);
                const minutes = duration % 60;
                const formattedDuration = `${hours}h ${minutes}m`;

                const row = document.createElement('tr');
                row.innerHTML = `
                            <td>${booking.roomName || 'Unknown Room'}</td>
                            <td>${bookingDate}</td>
                            <td>${startTime}</td>
                            <td>${endTime}</td>
                            <td>${formattedDuration}</td>
                            <td>
                                <button class="btn btn-primary btn-sm" onclick="viewBooking(${booking.bookingId})">View</button>
                                <button class="btn btn-info btn-sm" onclick="editBooking(${booking.bookingId})">Edit</button>
                                <button class="btn btn-danger btn-sm" onclick="cancelBooking(${booking.bookingId})">Cancel</button>
                            </td>
                        `;

                tableBody.appendChild(row);
            });
        }
        function viewBooking(bookingId) {
            alert(`View booking with ID: ${bookingId}`);
            // Implement view logic here
            // Example: Fetch booking details from API and show them in a modal
        }

        function editBooking(bookingId) {
            alert(`Edit booking with ID: ${bookingId}`);
            // Implement edit logic here
            // Example: Fetch booking details from API, populate a form, and allow updates
        }

        function cancelBooking(bookingId) {
            if (confirm('Are you sure you want to cancel this booking?')) {
                fetch(`/api/bookings/DeleteBooking/${bookingId}`, {
                    method: 'DELETE',
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Booking canceled successfully.');
                            fetchUserBookings(); // Refresh the table
                        } else {
                            response.text().then(errorText => {
                                alert(`Failed to cancel booking: ${errorText}`);
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error canceling booking:', error);
                    });
            }
        }
        
        function populateTimeDropdowns() {
            const timeIntervals = generateTimeIntervals(30, 8, 20); // 30-minute intervals from 8 AM to 8 PM
            const startTimeSelect = document.getElementById('startTime');
            const endTimeSelect = document.getElementById('endTime');
            let selectedStartTime = null;

            // Helper function to populate a dropdown with optional disabled intervals
            function populateDropdown(selectElement, disabledIntervals = [], currentValue = null) {
                selectElement.innerHTML = ''; // Clear existing options

                timeIntervals.forEach(time => {
                    const option = document.createElement('option');
                    option.value = time;
                    option.textContent = time;

                    // Disable option if it's in the disabledIntervals array
                    if (disabledIntervals.includes(time)) {
                        option.disabled = true;
                        option.style.color = 'gray'; // Optional styling for disabled options
                    }

                    selectElement.appendChild(option);
                });

                // Restore the previously selected value if valid
                if (currentValue && timeIntervals.includes(currentValue)) {
                    selectElement.value = currentValue;
                } else {
                    selectElement.value = ''; // Reset the value if invalid
                }
            }

            // Populate the start time dropdown without restrictions initially
            populateDropdown(startTimeSelect);

            // Adjust end time options based on the selected start time
            startTimeSelect.addEventListener('change', () => {
                selectedStartTime = startTimeSelect.value;
                const disabledIntervals = timeIntervals.filter(time => time <= selectedStartTime);
                populateDropdown(endTimeSelect, disabledIntervals, endTimeSelect.value);
            });

            // Validate time dropdowns based on overlapping bookings and real-time
            function validateTimeDropdowns() {
                const selectedDate = document.getElementById('bookingDate').value;
                const today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format
                const now = new Date(); // Current date and time
                const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`; // Current time in HH:mm format

                if (!selectedDate) return;

                const bookingsForDate = bookingsData.filter(booking => {
                    const bookingDate = new Date(booking.startDate).toISOString().split('T')[0];
                    return bookingDate === selectedDate;
                });

                const disabledStartTimes = new Set();
                const disabledEndTimes = new Set();

                // Add real-time validation for today
                if (selectedDate === today) {
                    timeIntervals.forEach(time => {
                        if (time <= currentTime) {
                            disabledStartTimes.add(time);
                            disabledEndTimes.add(time);
                        }
                    });
                }

                // Add validation for overlapping bookings
                bookingsForDate.forEach(booking => {
                    const bookingStart = new Date(booking.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                    const bookingEnd = new Date(booking.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                    timeIntervals.forEach(time => {
                        if (time >= bookingStart && time < bookingEnd) {
                            disabledStartTimes.add(time);
                        }
                        if (time > bookingStart && time <= bookingEnd) {
                            disabledEndTimes.add(time);
                        }
                    });
                });

                // Update dropdowns with the disabled times
                populateDropdown(startTimeSelect, Array.from(disabledStartTimes), startTimeSelect.value);
                populateDropdown(endTimeSelect, Array.from(disabledEndTimes), endTimeSelect.value);
            }

            // Attach event listeners for dynamic validation
            document.getElementById('bookingDate').addEventListener('change', validateTimeDropdowns);
            startTimeSelect.addEventListener('change', validateTimeDropdowns);
            endTimeSelect.addEventListener('change', validateTimeDropdowns);

            // Initial validation
            validateTimeDropdowns();
        }


        function generateTimeIntervals(intervalMinutes, startHour, endHour) {
            const times = [];
            const currentTime = new Date();
            currentTime.setHours(startHour, 0, 0, 0); // Start at the specified hour

            const endTime = new Date();
            endTime.setHours(endHour, 0, 0, 0); // End at the specified hour

            while (currentTime <= endTime) {
                const hours = String(currentTime.getHours()).padStart(2, '0');
                const minutes = String(currentTime.getMinutes()).padStart(2, '0');
                times.push(`${hours}:${minutes}`);

                // Add interval
                currentTime.setMinutes(currentTime.getMinutes() + intervalMinutes);
            }

            return times;
        }
        
        function initializeBookingDateInput() {
            const bookingDateInput = document.getElementById('bookingDate');
            if (bookingDateInput) {
                const today = new Date().toISOString().split('T')[0]; // Format today as YYYY-MM-DD
                bookingDateInput.setAttribute('min', today); // Set the minimum selectable date
            }
        }
    </script>
</body>
</html>
