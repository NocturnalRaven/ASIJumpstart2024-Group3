@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Analytics</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/css/style.css" />
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="mainBody">
        <div class="mainBodyInner">
            @*               <aside class="calendarSide">
            <div id="calendar"></div>
            </aside> *@
            <div class="mainContent user-analytics-overall">
                <div class=" user-analytics-section-side">
                    <!-- Analytics Card -->
                    <div class="analytics-card">
                        <div class="d-flex justify-content-between align-items-center">
                            <p class="bookingsDashboardTitle">Your Analytics</p>
                            <div class="dropdown">
                                <button class="btn btn-secondary dropdown-toggle btn-sm analyticsDropdown" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="analyticsFilterButton">
                                    All Time
                                </button>
                                <ul class="dropdown-menu" id="analyticsFilterOptions">
                                    <li><a class="dropdown-item" href="#" data-filter="all">All Time</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="day">Past Day</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="week">Past Week</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="month">Past Month</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="year">Past Year</a></li>
                                </ul>
                            </div>
                        </div>

                        <!-- Pie Chart -->
                        <div class="chart-container">
                            <canvas id="analyticsChart"></canvas>
                        </div>
                        <div class="legend-container"></div>
                    </div>


                </div>

                <div class="user-analytics-bar-line-section">
                    <!-- Bar Chart for Pending Bookings -->
                    <div class=" dashboardPending user-analytics-bar-chart ">
                        <div class="chart-container2">
                            <canvas id="barChart" width="200" height="200"></canvas>
                        </div>
                    </div>
                    <!-- Line Chart for Bookings Over Time -->
                    <div class="bookingsDashboard user-analytics-line-chart">
                        <div class="chart-container2">
                            <canvas id="lineChart" width="200" height="200"></canvas>
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>

    <!-- Script -->
    <script>
        let bookingsData = []; // Global bookings data
        let rooms = []; // Global rooms data
        let userBookings = []; // User-specific bookings
        const currentUserId = '@(HttpContextAccessor.HttpContext.User.FindFirst("UserId")?.Value ?? "0")'; // Replace with the actual user ID fetch logic

        // Fetch rooms data
        async function fetchRoomsData() {
            try {
                const response = await fetch('/api/bookings/GetAllRooms'); // Replace with your actual API endpoint
                if (!response.ok) throw new Error('Failed to fetch rooms data');
                rooms = await response.json();
            } catch (error) {
                console.error('Error fetching rooms:', error.message);
            }
        }

        // Fetch bookings data
        async function fetchBookingsData() {
            try {
                const response = await fetch('/api/bookings/GetAllBookings'); // Replace with your API endpoint
                if (!response.ok) throw new Error('Failed to fetch bookings data');
                bookingsData = await response.json();

                // Filter bookings for the current user
                userBookings = bookingsData.filter(booking => booking.userId == currentUserId);

                // Ensure both bookings and rooms are available before updating analytics
                await fetchRoomsData();
                updateAnalytics('all'); // Default filter
                // updateCalendarHotspots(userBookings);
            } catch (error) {
                console.error('Error fetching bookings:', error.message);
            }
        }

        // Update analytics based on user bookings
        function updateAnalytics(filter) {
            const filteredBookings = filterBookings(filter);

            // Update charts
            updatePieChart(filteredBookings, rooms);
            updateBarChart(filteredBookings);
            updateLineChart(filteredBookings);
        }

        // Filter bookings by time period
        function filterBookings(filter) {
            const now = new Date();
            return userBookings.filter(booking => {
                const bookingDate = new Date(booking.startDate);
                switch (filter) {
                    case 'day':
                        return (now - bookingDate) <= 86400000; // 1 day
                    case 'week':
                        return (now - bookingDate) <= 604800000; // 1 week
                    case 'month':
                        return (now - bookingDate) <= 2592000000; // 1 month
                    case 'year':
                        return (now - bookingDate) <= 31536000000; // 1 year
                    case 'all':
                    default:
                        return true;
                }
            });
        }

        // Update pie chart
        function updatePieChart(filteredBookings, rooms) {
            const categoryCounts = filteredBookings.reduce((acc, booking) => {
                const room = rooms.find(r => r.roomId === booking.roomId);
                const category = room ? room.style : 'Unknown';
                acc[category] = (acc[category] || 0) + 1;
                return acc;
            }, {});

            const data = {
                labels: Object.keys(categoryCounts),
                datasets: [{
                    data: Object.values(categoryCounts),
                    backgroundColor: ['#6848FF', '#AFAEFF', '#E6DEFF', '#F3F0FF']
                }]
            };

            const ctx = document.getElementById('analyticsChart').getContext('2d');
            new Chart(ctx, { type: 'pie', data });
        }

        // Update bar chart
        function updateBarChart(filteredBookings) {
            const dayCounts = filteredBookings.reduce((acc, booking) => {
                const day = new Date(booking.startDate).toLocaleDateString('en-US', { weekday: 'long' });
                acc[day] = (acc[day] || 0) + 1;
                return acc;
            }, {});

            const ctx = document.getElementById('barChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(dayCounts),
                    datasets: [{
                        label: 'Bookings by Day',
                        data: Object.values(dayCounts),
                        backgroundColor: '#9fa8da'
                    }]
                }
            });
        }

        // Update line chart
        function updateLineChart(filteredBookings) {
            const hourCounts = filteredBookings.reduce((acc, booking) => {
                const hour = new Date(booking.startDate).getHours();
                acc[hour] = (acc[hour] || 0) + 1;
                return acc;
            }, {});

            const ctx = document.getElementById('lineChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: Object.keys(hourCounts).map(hour => `${hour}:00`),
                    datasets: [{
                        label: 'Bookings by Hour',
                        data: Object.values(hourCounts),
                        borderColor: 'blue',
                        fill: false
                    }]
                }
            });
        }

        // Update calendar with user-specific hotspots
        // function updateCalendarHotspots(userBookings) {
        //     const hotspotDates = userBookings.map(booking => {
        //         return new Date(booking.startDate).toLocaleDateString('en-CA'); Format as YYYY-MM-DD
        //     });

        //     flatpickr("#calendar", {
        //         inline: true,
        //         mode: "single",
        //         dateFormat: "Y-m-d",
        //         onDayCreate: (dObj, dStr, fp, dayElem) => {
        //             const dayDate = dayElem.dateObj.toLocaleDateString('en-CA');
        //             if (hotspotDates.includes(dayDate)) {
        //                 dayElem.style.backgroundColor = '#FFD700';
        //             }
        //         }
        //     });
        // }

        // Fetch data on page load
        fetchBookingsData();
    </script>
</body>
</html>
