@using static ASI.Basecode.Resources.Views.Screen;
@using static ASI.Basecode.Resources.Views.Button;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/css/style.css" />
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <main class="mainBody">
        <div class="mainBodyInner">
            <aside class="calendarSide">
                <div id="calendar"></div>
                <div class="recentBookingsOverall">
                    <p class="recentBookingsAside">Bookings for Selected Date</p>
                    <div class="recentBookingsOverallInner" id="selectedDateBookings">
                        <p class="text-muted text-center">Select a date to view bookings.</p>
                    </div>
                </div>
            </aside>

            <div class="mainContent">
                <div class="bookingsDashboard">
                    <div class="bookingsDashboardHeader">
                        <p class="bookingsDashboardTitle">Bookings</p>
                        <div>
                            <i class="bi bi-filter" data-bs-toggle="modal" data-bs-target="#filterModal"></i>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped align-middle" id="userBookingsTable">
                            <thead>
                                <tr>
                                    <th scope="col">Room Name</th>
                                    <th scope="col">Style</th>
                                    <th scope="col">Booking Date</th>
                                    <th scope="col">Start Time</th>
                                    <th scope="col">End Time</th>
                                    <th scope="col">Duration</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Booking rows will be dynamically rendered here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <!-- Add Booking Modal -->
    <div class="modal fade" id="addBookingModal" tabindex="-1" aria-labelledby="addBookingModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addBookingModalLabel">Add Booking</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addBookingForm" onsubmit="addBooking(); return false;">
                    <div class="modal-body">
                        <!-- User Selection -->
                        <div class="mb-3">
                            <label for="addBookingUser" class="form-label">User</label>
                            <select id="addBookingUser" class="form-select" required disabled>
                                <!-- Populated dynamically with the logged-in user's credentials -->
                            </select>
                        </div>

                        <!-- Room Selection -->
                        <div class="mb-3">
                            <label for="addBookingRoom" class="form-label">Room</label>
                            <select id="addBookingRoom" class="form-select" required>
                                <!-- Populated dynamically with room options -->
                            </select>
                        </div>

                        <!-- Booking Date -->
                        <div class="mb-3">
                            <label for="addBookingDate" class="form-label">Booking Date</label>
                            <input type="date" id="addBookingDate" class="form-control" min="" required>
                        </div>

                        <!-- Start Time -->
                        <div class="mb-3">
                            <label for="AddBookingStartTime" class="form-label">Start Time</label>
                            <select id="AddBookingStartTime" class="form-select" required>
                                <!-- Populated dynamically with time slots -->
                            </select>
                        </div>

                        <!-- End Time -->
                        <div class="mb-3">
                            <label for="AddBookingEndTime" class="form-label">End Time</label>
                            <select id="AddBookingEndTime" class="form-select" required>
                                <!-- Populated dynamically with time slots -->
                            </select>
                        </div>

                        <!-- Number of People -->
                        <div class="mb-3">
                            <label for="addBookingPeople" class="form-label">Number of People</label>
                            <input type="number" id="addBookingPeople" class="form-control" min="1" required>
                        </div>

                        <!-- Booking Status -->
                        <div class="mb-3">
                            <label for="addBookingStatus" class="form-label">Status</label>
                            <select id="addBookingStatus" class="form-select" required>
                                <option value="Confirmed">Confirmed</option>
                                <option value="Pending">Pending</option>
                                <option value="Canceled">Canceled</option>
                            </select>
                        </div>

                        <!-- Recurring Booking -->
                        <div class="mb-3">
                            <label for="addBookingRecurring" class="form-label">Recurring Booking</label>
                            <input type="checkbox" id="addBookingRecurring" class="form-check-input">
                        </div>

                        <!-- Frequency (Shown only if Recurring Booking is checked) -->
                        <div class="mb-3" id="frequencySection" style="display: none;">
                            <label for="addBookingFrequency" class="form-label">Frequency</label>
                            <select id="addBookingFrequency" class="form-select">
                                <option value="Daily">Daily</option>
                                <option value="Weekly">Weekly</option>
                                <option value="Monthly">Monthly</option>
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add Booking</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <!-- View Modal -->
    <div class="modal fade" id="viewBookingModal" tabindex="-1" aria-labelledby="viewBookingModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewBookingModalLabel">View Booking Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Room Name:</strong> <span id="viewRoomName"></span></p>
                    <p><strong>Room Style:</strong> <span id="viewRoomStyle"></span></p>
                    <p><strong>Booking Date:</strong> <span id="viewBookingDate"></span></p>
                    <p><strong>Start Time:</strong> <span id="viewStartTime"></span></p>
                    <p><strong>End Time:</strong> <span id="viewEndTime"></span></p>
                    <p><strong>Duration:</strong> <span id="viewBookingDuration"></span></p>
                    <p><strong>Recurring:</strong> <span id="viewRecurring"></span></p>
                    <p><strong>Frequency:</strong> <span id="viewFrequency"></span></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Edit Booking Modal -->
    <div class="modal fade" id="editBookingModal" tabindex="-1" aria-labelledby="editBookingModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editBookingModalLabel">Edit Booking Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editBookingForm">
                    <div class="modal-body">
                        <input type="hidden" id="editBookingId">
                        <div class="mb-3">
                            <label for="editRoomName" class="form-label">Room Name</label>
                            <input type="text" class="form-control" id="editRoomName" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="editRoomStyle" class="form-label">Room Style</label>
                            <input type="text" class="form-control" id="editRoomStyle" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="editBookingDate" class="form-label">Booking Date</label>
                            <input type="date" class="form-control" id="editBookingDate" required>
                        </div>
                        <div class="mb-3">
                            <label for="editStartTime" class="form-label">Start Time</label>
                            <select class="form-select" id="editStartTime" required>
                                <!-- Populate dynamically -->
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editEndTime" class="form-label">End Time</label>
                            <select class="form-select" id="editEndTime" required>
                                <!-- Populate dynamically -->
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editRecurring" class="form-label">Recurring</label>
                            <select class="form-select" id="editRecurring">
                                <option value="No">No</option>
                                <option value="Yes">Yes</option>
                            </select>
                        </div>
                        <div class="mb-3" id="editFrequencyContainer" style="display: none;">
                            <label for="editFrequency" class="form-label">Frequency</label>
                            <select class="form-select" id="editFrequency">
                                <option value="Daily">Daily</option>
                                <option value="Weekly">Weekly</option>
                                <option value="Monthly">Monthly</option>
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="saveBookingChanges">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <!-- Filter Modal -->
    <div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="filterModalLabel">Filter Bookings</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <label for="bookingFilter" class="form-label">Select Filter</label>
                    <select id="bookingFilter" class="form-select">
                        <option value="upcoming">Upcoming Bookings</option>
                        <option value="past">Past Bookings</option>
                        <option value="all">All Bookings</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="applyFilterBtn">Apply Filter</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchBookingDates(); // Fetch dates with bookings and initialize the calendar


            document.getElementById('applyFilterBtn').addEventListener('click', () => {
                const filterValue = document.getElementById('bookingFilter').value;
                filterBookings(filterValue); // Apply the filter when the button is clicked
                $('#filterModal').modal('hide'); // Close the modal after applying the filter
            });

        // Global Variables
        let currentUserId = '@(HttpContextAccessor.HttpContext.User.FindFirst("UserId")?.Value ?? "0")'; // Logged-in user's ID
        let currentUserName = '@(User.Claims.FirstOrDefault(c => c.Type == "name")?.Value ?? "Guest")'; // Logged-in user's name
        let bookingsData = []; // Store fetched bookings
        let rooms = []; // Store fetched rooms
        let bookingDates = []; // Store all dates with bookings
            // Function to filter bookings
            function filterBookings(filter) {
                const now = new Date();
                let filteredBookings = [];

                switch (filter) {
                    case 'upcoming':
                        filteredBookings = bookingsData.filter(booking => new Date(booking.endDate) > now);
                        break;
                    case 'past':
                        filteredBookings = bookingsData.filter(booking => new Date(booking.endDate) < now);
                        break;
                    case 'all':
                        filteredBookings = bookingsData;
                        break;
                    default:
                        filteredBookings = bookingsData;
                }

                renderBookingsTable(filteredBookings); // Render filtered bookings
            }

            // Function to initialize the calendar with booking dates
            function initializeCalendar() {
                // Ensure data is available before initializing the calendar
                if (!bookingsData.length || !rooms.length) {
                    console.warn("Bookings or rooms data not initialized yet.");
                    return;
                }

                const today = new Date().toLocaleDateString('en-CA'); // Format today's date as YYYY-MM-DD

                // Filter the bookings for the current user
                const userBookings = bookingsData.filter(booking => booking.userId === currentUserId);
                const bookingDatesForUser = userBookings.map(booking => new Date(booking.startDate).toLocaleDateString('en-CA'));

                flatpickr("#calendar", {
                    inline: true,
                    mode: "single",
                    dateFormat: "Y-m-d",
                    onDayCreate: (dObj, dStr, fp, dayElem) => {
                        const dateStr = dayElem.dateObj.toLocaleDateString('en-CA'); // Ensure this is correctly formatted

                        // Style past dates
                        if (dateStr < today) {
                            dayElem.classList.add('past-date'); // Gray out past dates
                        }

                        // Highlight days with the current user's bookings
                        if (bookingDatesForUser.includes(dateStr)) {
                            dayElem.classList.add('has-booking'); // Highlight days with current user's bookings
                        }
                    },
                    onChange: (selectedDates) => {
                        if (selectedDates.length > 0) {
                            const selectedDate = selectedDates[0].toLocaleDateString('en-CA'); // Format as YYYY-MM-DD
                            displayBookingsForDate(selectedDate); // Show bookings for the selected date
                        }
                    },
                    onReady: () => {
                        // Pre-highlight all days with current user's bookings when the calendar is ready
                        const calendarDays = document.querySelectorAll('.flatpickr-day');
                        calendarDays.forEach(dayElem => {
                            const dateStr = dayElem.dateObj.toLocaleDateString('en-CA'); // Get the date string for the current day
                            if (bookingDatesForUser.includes(dateStr)) {
                                dayElem.classList.add('has-booking'); // Highlight the day
                            }
                        });
                    }
                });
            }

            // Function to fetch booking dates
            async function fetchBookingDates() {
                try {
                    const response = await fetch('/api/bookings/GetAllBookings'); // Fetch all bookings for validation
                    if (!response.ok) throw new Error("Failed to fetch booking dates.");
                    const bookings = await response.json();
                    bookingDates = [...new Set(bookings.map(booking => new Date(booking.startDate).toISOString().split('T')[0]))]; // Extract unique dates
                    await fetchBookingsAndRooms(); // Wait for this to finish before initializing the calendar
                } catch (error) {
                    console.error('Error fetching booking dates:', error.message);
                }
            }
            // Function to fetch bookings and rooms and populate bookingsData
            async function fetchBookingsAndRooms() {
                try {
                    const [bookingsResponse, roomsResponse] = await Promise.all([
                        fetch('/api/bookings/GetAllBookings'), // Fetch all bookings
                        fetch('/api/bookings/GetAllRooms'), // Fetch all rooms
                    ]);

                    if (!bookingsResponse.ok || !roomsResponse.ok) {
                        throw new Error("Failed to fetch bookings or rooms.");
                    }

                    const allBookings = await bookingsResponse.json();
                    rooms = await roomsResponse.json();

                    // Map room details to all bookings and store in bookingsData
                    bookingsData = allBookings.map(booking => {
                        const room = rooms.find(r => r.roomId === booking.roomId); // Find room details by roomId
                        return {
                            ...booking,
                            roomName: room ? room.name : 'Unknown Room', // Ensure roomName is not undefined
                            style: room ? room.style : 'Unknown Style', // Ensure style is not undefined
                        };
                    });

                    // Filter bookings to only display the current user's bookings
                    const userBookings = bookingsData.filter(booking => booking.userId === parseInt(currentUserId, 10));

                    // Render the bookings table with the filtered user bookings
                    renderBookingsTable(userBookings);

                    // Initialize the calendar after bookings data is fetched
                    initializeCalendar();
                } catch (error) {
                    console.error("Error fetching bookings and rooms:", error.message);
                }
            }
            // Display Bookings for Selected Date
            function displayBookingsForDate(date) {
                const container = document.getElementById('selectedDateBookings');
                container.innerHTML = ''; // Clear the existing content

                // Filter to show bookings only for the selected date
                const bookingsForDate = bookingsData.filter(booking => {
                    const bookingDate = new Date(booking.startDate).toISOString().split('T')[0];
                    return bookingDate === date && booking.userId === parseInt(currentUserId, 10); // Show only user's bookings
                });

                if (bookingsForDate.length === 0) {
                    container.innerHTML = `<p class="text-muted text-center">No bookings for this date.</p>`;
                    return;
                }

                bookingsForDate.forEach(booking => {
                    const startTime = new Date(booking.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                    const endTime = new Date(booking.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                    const duration = formatDuration(new Date(booking.startDate), new Date(booking.endDate));

                    const bookingHTML = `
                        <div class="recentBookings">
                            <div class="recentBookingsDetailsDiv">
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-house-door-fill"></i>
                                    <p>${booking.roomName}</p>
                                </div>
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-clock"></i>
                                    <p>${startTime} - ${endTime}</p>
                                </div>
                                <div class="recentBookingsDetails">
                                    <i class="bi bi-hourglass-split"></i>
                                    <p>${duration}</p>
                                </div>
                            </div>
                        </div>
                    `;
                    container.innerHTML += bookingHTML;
                });
            }

            // Function to render bookings table (you can adjust this based on your existing rendering logic)
            function renderBookingsTable(bookings) {
                const tableBody = document.getElementById('userBookingsTable').querySelector('tbody');
                tableBody.innerHTML = ''; // Clear the table before adding filtered rows

                bookings.forEach(booking => {
                    // Find the room details based on the roomId
                    const room = rooms.find(room => room.roomId === booking.roomId);
                    const roomName = room ? room.name : 'Unknown Room';  // Get room name
                    const roomStyle = room ? room.style : 'Unknown Style';  // Get room style

                    const bookingDate = new Date(booking.startDate).toLocaleDateString();
                    const startTime = new Date(booking.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                    const endTime = new Date(booking.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                    // Calculate Duration
                    const startDateObj = new Date(booking.startDate);
                    const endDateObj = new Date(booking.endDate);
                    const duration = formatDuration(startDateObj, endDateObj);

                    const row = document.createElement('tr');
                    row.innerHTML = `
                    <td>${roomName || 'Unknown Room'}</td>
                    <td>${roomStyle || 'Unknown Style'}</td> <!-- Added Room Style -->
                    <td>${bookingDate}</td>
                    <td>${startTime}</td>
                    <td>${endTime}</td>
                    <td>${duration}</td> <!-- Added Duration -->
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="viewBooking(${booking.bookingId})">View</button>
                        <button class="btn btn-info btn-sm" onclick="editBooking(${booking.bookingId})">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="cancelBooking(${booking.bookingId})">Cancel</button>
                    </td>
                `;
                    tableBody.appendChild(row);
                });

                // Show a message if there are no bookings after filtering
                if (bookings.length === 0) {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td colspan="5" class="text-center text-muted">No bookings found.</td>
                    `;
                    tableBody.appendChild(row);
                }
            }
        });


        // Utility Functions
        function formatDate(dateStr) {
            return new Date(dateStr).toLocaleDateString([], { year: 'numeric', month: 'short', day: 'numeric' });
        }

        function formatTime(dateStr) {
            return new Date(dateStr).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        function formatDuration(startDate, endDate) {
            const duration = Math.abs(endDate - startDate) / (1000 * 60); // Duration in minutes
            const hours = Math.floor(duration / 60);
            const minutes = duration % 60;
            return `${hours}h ${minutes}m`;
        }

        // Function to view booking details
        function viewBooking(bookingId) {
            const booking = bookingsData.find(b => b.bookingId === bookingId);
            if (!booking) {
                alert('Booking not found.');
                return;
            }

            const { roomName, style, startDate, endDate, isRecurring, frequency } = booking;
            const duration = formatDuration(new Date(startDate), new Date(endDate));

            // Populate modal with booking details
            document.getElementById('viewRoomName').textContent = roomName || 'Unknown Room';
            document.getElementById('viewRoomStyle').textContent = style || 'Unknown Style';
            document.getElementById('viewBookingDate').textContent = formatDate(startDate);
            document.getElementById('viewStartTime').textContent = formatTime(startDate);
            document.getElementById('viewEndTime').textContent = formatTime(endDate);
            document.getElementById('viewBookingDuration').textContent = duration;
            document.getElementById('viewRecurring').textContent = isRecurring ? 'Yes' : 'No';
            document.getElementById('viewFrequency').textContent = frequency || 'N/A';

            // Show modal
            const viewModal = new bootstrap.Modal(document.getElementById('viewBookingModal'));
            viewModal.show();
        }
        async function editBooking(bookingId) {
            console.log("editBooking called with bookingId:", bookingId);

            try {
                // Fetch the booking details by ID
                const response = await fetch(`/api/bookings/GetBookedRoomById/${bookingId}`);
                if (!response.ok) throw new Error("Failed to fetch booking details.");

                const booking = await response.json();
                console.log("Fetched booking details:", booking);

                // Fetch all room details
                const roomResponse = await fetch('/api/bookings/GetAllRooms');
                if (!roomResponse.ok) throw new Error("Failed to fetch rooms.");
                const rooms = await roomResponse.json();

                // Map room details to the booking
                const room = rooms.find(r => r.roomId === booking.roomId);
                booking.roomName = room ? room.name : "Unknown Room";
                booking.roomStyle = room ? room.style : "Unknown Style";

                // Populate the modal with booking details
                document.getElementById('editBookingId').value = bookingId;
                document.getElementById('editRoomName').value = booking.roomName;
                document.getElementById('editRoomStyle').value = booking.roomStyle;

                const bookingDate = new Date(booking.startDate).toISOString().split('T')[0];
                document.getElementById('editBookingDate').value = bookingDate;
                document.getElementById('editBookingDate').setAttribute('min', new Date().toISOString().split('T')[0]);

                const startTime = new Date(booking.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const endTime = new Date(booking.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                populateEditTimeDropdowns(startTime, endTime);

                document.getElementById('editRecurring').value = booking.isRecurring ? "Yes" : "No";
                document.getElementById('editFrequencyContainer').style.display = booking.isRecurring ? "block" : "none";
                document.getElementById('editFrequency').value = booking.frequency || "Daily";

                // Save changes
                document.getElementById('saveBookingChanges').onclick = async () => {
                    const updatedBooking = {
                        bookingId: parseInt(document.getElementById('editBookingId').value, 10),
                        roomId: booking.roomId,
                        startDate: `${document.getElementById('editBookingDate').value}T${document.getElementById('editStartTime').value}`,
                        endDate: `${document.getElementById('editBookingDate').value}T${document.getElementById('editEndTime').value}`,
                        isRecurring: document.getElementById('editRecurring').value === "Yes",
                        frequency: document.getElementById('editRecurring').value === "Yes" ? document.getElementById('editFrequency').value : null,
                    };

                    console.log("Saving updated booking:", updatedBooking);

                    // Validate updated times against existing bookings
                    const allBookingsResponse = await fetch('/api/bookings/GetAllBookings');
                    if (!allBookingsResponse.ok) {
                        console.error("Failed to fetch all bookings for conflict checking.");
                        alert("Could not validate booking conflicts. Please try again later.");
                        return;
                    }

                    const allBookings = await allBookingsResponse.json();
                    const overlapping = allBookings.some(existingBooking => {
                        const existingStart = new Date(existingBooking.startDate).getTime();
                        const existingEnd = new Date(existingBooking.endDate).getTime();
                        const updatedStart = new Date(updatedBooking.startDate).getTime();
                        const updatedEnd = new Date(updatedBooking.endDate).getTime();

                        return (
                            existingBooking.roomId === updatedBooking.roomId &&
                            existingBooking.bookingId !== updatedBooking.bookingId &&
                            (
                                (updatedStart >= existingStart && updatedStart < existingEnd) ||
                                (updatedEnd > existingStart && updatedEnd <= existingEnd) ||
                                (updatedStart <= existingStart && updatedEnd >= existingEnd)
                            )
                        );
                    });

                    if (overlapping) {
                        alert("Updated booking conflicts with an existing booking. Please choose another time slot.");
                        return;
                    }

                    // Send the updated booking to the server
                    try {
                        const updateResponse = await fetch(`/api/bookings/UpdateBooking/${updatedBooking.bookingId}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(updatedBooking),
                        });

                        if (updateResponse.ok) {
                            alert("Booking updated successfully.");
                            fetchBookingsAndRooms(); // Refresh bookings
                            const editModal = bootstrap.Modal.getInstance(document.getElementById('editBookingModal'));
                            editModal.hide();
                        } else {
                            const errorText = await updateResponse.text();
                            alert(`Failed to update booking: ${errorText}`);
                        }
                    } catch (error) {
                        console.error("Error updating booking:", error);
                        alert("An error occurred while updating the booking. Please try again later.");
                    }
                };

                // Show the edit modal
                const editModal = new bootstrap.Modal(document.getElementById('editBookingModal'));
                editModal.show();
            } catch (error) {
                console.error("Error fetching booking for editing:", error);
                alert("An error occurred while fetching the booking details.");
            }
        }


        function populateEditTimeDropdowns(bookingStartTime, bookingEndTime) {
            const timeIntervals = generateTimeIntervals(30, 8, 20); // 30-minute intervals from 8 AM to 8 PM
            const startTimeSelect = document.getElementById('editStartTime');
            const endTimeSelect = document.getElementById('editEndTime');
            let selectedStartTime = bookingStartTime || null;

            // Helper function to populate a dropdown with optional disabled intervals
            function populateDropdown(selectElement, disabledIntervals = [], currentValue = null) {
                selectElement.innerHTML = ''; // Clear existing options

                timeIntervals.forEach(time => {
                    const option = document.createElement('option');
                    option.value = time;
                    option.textContent = time;

                    // Disable option if it's in the disabledIntervals array
                    if (disabledIntervals.includes(time)) {
                        option.disabled = true;
                        option.style.color = 'gray'; // Optional styling for disabled options
                    }

                    selectElement.appendChild(option);
                });

                // Restore the previously selected value if valid
                if (currentValue && timeIntervals.includes(currentValue) && !disabledIntervals.includes(currentValue)) {
                    selectElement.value = currentValue;
                } else {
                    selectElement.value = ''; // Reset the value if invalid
                }
            }

            // Populate the start time dropdown without restrictions initially
            populateDropdown(startTimeSelect, [], selectedStartTime);

            // Revalidate the dropdowns dynamically when the start time changes
            startTimeSelect.addEventListener('change', () => {
                selectedStartTime = startTimeSelect.value;
                validateTimeDropdowns(); // Revalidate when the start time is updated
            });

            // Core function for validating time dropdowns
            function validateTimeDropdowns() {
                const selectedDate = document.getElementById('editBookingDate').value;
                const today = new Date().toISOString().split('T')[0];
                const now = new Date(); // Current date and time
                const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;

                if (!selectedDate) return;

                const bookingsForDate = bookingsData.filter(booking => {
                    const bookingDate = new Date(booking.startDate).toISOString().split('T')[0];
                    return bookingDate === selectedDate;
                });

                const disabledStartTimes = new Set();
                const disabledEndTimes = new Set();

                // Real-time validation for today
                if (selectedDate === today) {
                    timeIntervals.forEach(time => {
                        if (time <= currentTime) {
                            disabledStartTimes.add(time);
                            disabledEndTimes.add(time);
                        }
                    });
                }

                // Add validation for overlapping bookings
                bookingsForDate.forEach(booking => {
                    const bookingStart = new Date(`1970-01-01T${booking.startDate.split('T')[1]}`).getTime();
                    const bookingEnd = new Date(`1970-01-01T${booking.endDate.split('T')[1]}`).getTime();

                    timeIntervals.forEach(time => {
                        const intervalTime = new Date(`1970-01-01T${time}`).getTime();

                        // Disable start times overlapping with existing bookings
                        if (intervalTime >= bookingStart && intervalTime < bookingEnd) {
                            disabledStartTimes.add(time);
                        }

                        // Disable end times if they overlap or are adjacent to existing bookings
                        if (intervalTime > bookingStart && intervalTime <= bookingEnd) {
                            disabledEndTimes.add(time);
                        }
                    });
                });

                // Logical validation: End time must be after start time
                if (selectedStartTime) {
                    const selectedStartTimestamp = new Date(`1970-01-01T${selectedStartTime}`).getTime();
                    let nextBookingStart = null;

                    // Find the next booking's start time after the selected start time
                    bookingsForDate.forEach(booking => {
                        const bookingStart = new Date(`1970-01-01T${booking.startDate.split('T')[1]}`).getTime();
                        if (bookingStart > selectedStartTimestamp && (!nextBookingStart || bookingStart < nextBookingStart)) {
                            nextBookingStart = bookingStart;
                        }
                    });

                    timeIntervals.forEach(time => {
                        const intervalTime = new Date(`1970-01-01T${time}`).getTime();

                        // Disable end times that are before or equal to the selected start time
                        if (intervalTime <= selectedStartTimestamp) {
                            disabledEndTimes.add(time);
                        }

                        // Disable end times that extend into the next booking's start time
                        if (nextBookingStart && intervalTime >= nextBookingStart) {
                            disabledEndTimes.add(time);
                        }
                    });
                }

                // Update dropdowns with the disabled times
                populateDropdown(startTimeSelect, Array.from(disabledStartTimes), startTimeSelect.value);
                populateDropdown(endTimeSelect, Array.from(disabledEndTimes), endTimeSelect.value);
            }

            // Attach event listeners for validation
            document.getElementById('editBookingDate').addEventListener('change', validateTimeDropdowns);
            startTimeSelect.addEventListener('change', validateTimeDropdowns);
            endTimeSelect.addEventListener('change', validateTimeDropdowns);

            // Initial validation
            validateTimeDropdowns();
        }

        function generateTimeIntervals(intervalMinutes, startHour, endHour) {
            const times = [];
            const currentTime = new Date();
            currentTime.setHours(startHour, 0, 0, 0); // Start at the specified hour

            const endTime = new Date();
            endTime.setHours(endHour, 0, 0, 0); // End at the specified hour

            while (currentTime <= endTime) {
                const hours = String(currentTime.getHours()).padStart(2, '0');
                const minutes = String(currentTime.getMinutes()).padStart(2, '0');
                times.push(`${hours}:${minutes}`);

                // Add interval
                currentTime.setMinutes(currentTime.getMinutes() + intervalMinutes);
            }

            return times;
        }
        async function cancelBooking(bookingId) {
            if (!confirm('Are you sure you want to cancel this booking?')) return;

            try {
                const response = await fetch(`/api/bookings/DeleteBooking/${bookingId}`, { method: 'DELETE' });

                if (response.ok) {
                    alert('Booking canceled successfully.');
                    fetchBookingsAndRooms(); // Refresh the table
                } else {
                    const errorText = await response.text();
                    alert(`Failed to cancel booking: ${errorText}`);
                }
            } catch (error) {
                console.error('Error canceling booking:', error.message);
                alert('An error occurred while canceling the booking. Please try again later.');
            }
        }

    </script>

</body>
</html>