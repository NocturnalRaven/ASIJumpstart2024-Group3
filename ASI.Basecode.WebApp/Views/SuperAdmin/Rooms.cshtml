@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Room Management</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="~/css/style.css" asp-append-version="true" />
</head>

<body>
    <main class="mainBody mainBodyRooms">
        <div class="mainBodyInner2">
            <!-- Rooms Table -->
            <div class="bookingsDashboard userDashboard admin-rooms-section">
                <div class="bookingsDashboardHeader">
                    <p class="bookingsDashboardTitle">Rooms</p>
                    <div class="users-inputGroup">
                        <button class="btn btn-sm adminAddRoomBtn" type="button" data-bs-toggle="offcanvas"
                                data-bs-target="#addRoomCanvas" aria-controls="addRoomCanvas" onclick="clearForm()">
                            <i class="bi bi-plus-square me-2"></i>
                            <p class="addRoomText">Add Room</p>
                        </button>
                    </div>
                </div>
                <div class="table-wrapper">
                    <table class="table table-striped align-middle" id="adminRoomTable">
                        <thead>
                            <tr>
                                <th scope="col">Room ID</th>
                                <th scope="col">Room</th>
                                <th scope="col">Style</th>
                                <th scope="col">Capacity</th>
                                <th scope="col">Status</th>
                                <th scope="col">Floor</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Room data will be rendered here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Booked Rooms Table -->
            <div class="bookingsDashboard userDashboard  admin-rooms-section">
                <div class="bookingsDashboardHeader">
                    <p class="bookingsDashboardTitle">Booked Rooms</p>
                </div>
                <div class="table-wrapper admin-booked-section-table-wrapper">
                    <table class="table table-striped align-middle" id="adminBookedTable">
                        <thead>
                            <tr>
                                <th scope="col">Room</th>
                                <th scope="col">User</th>
                                <th scope="col">No. of People</th>
                                <th scope="col">Date Booked</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Booked rooms data will be rendered here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Offcanvas for Adding/Editing Rooms -->
        <div class="offcanvas offcanvas-end" tabindex="-1" id="addRoomCanvas">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="canvasTitle">Add Room</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <form id="roomForm">
                    <div class="mb-3" id="roomIdContainer" style="display: none;">
                        <label for="roomId" class="form-label">Room ID</label>
                        <input type="text" class="form-control" id="roomId" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="roomName" class="form-label">Room Name</label>
                        <input type="text" class="form-control" id="roomName" required>
                    </div>
                    <div class="mb-3">
                        <label for="roomStyle" class="form-label">Style</label>
                        <select class="form-select" id="roomStyle" required onchange="updateRoomImage()">
                            <option value="Classroom">Classroom</option>
                            <option value="Banquet">Banquet</option>
                            <option value="U-Shape">U-Shape</option>
                            <option value="Conference">Conference</option>
                            <option value="Auditorium">Auditorium</option>
                            <option value="Boardroom">Boardroom</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="roomImagePreview" class="form-label">Room Image</label>
                        <div id="roomImagePreview">
                            <img src="" alt="Room Preview" id="roomImage" class="img-thumbnail" style="max-height: 200px; display: none;">
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="roomCapacity" class="form-label">Capacity</label>
                        <input type="number" class="form-control" id="roomCapacity" required>
                    </div>
                    <div class="mb-3">
                        <label for="roomStatus" class="form-label">Status</label>
                        <select class="form-select" id="roomStatus" required>
                            <option value="Available">Available</option>
                            <option value="Booked">Booked</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="roomFloor" class="form-label">Floor</label>
                        <input type="number" class="form-control" id="roomFloor" required>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="saveRoom()">Save Room</button>
                </form>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchRooms();
            fetchBookedRooms();
        });

        function clearForm() {
            document.getElementById('roomForm').reset();
            document.getElementById('roomId').value = '';
            document.getElementById('roomIdContainer').style.display = 'none';
            document.getElementById('canvasTitle').textContent = 'Add Room';
        }

        async function fetchRooms() {
            try {
                const response = await fetch('/api/rooms');
                if (response.ok) {
                    const rooms = await response.json();
                    renderRooms(rooms);
                } else {
                    console.error('Failed to fetch room data');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function renderRooms(rooms) {
            const tbody = document.querySelector('#adminRoomTable tbody');
            tbody.innerHTML = '';

            rooms.forEach(room => {
                const row = document.createElement('tr');
                row.innerHTML = `
                                    <td>${room.roomId}</td>
                                    <td>${room.name}</td>
                                    <td>${room.style}</td>
                                    <td>${room.capacity}</td>
                                    <td style="color: ${room.status === 'Available' ? 'green' : 'red'}">${room.status}</td>
                                    <td>${room.floor}</td>
                                    <td>
                                        <i class="bi bi-pencil-square" onclick="editRoom(${room.roomId})"></i>
                                        <i class="bi bi-trash3 ms-2" onclick="deleteRoom(${room.roomId})"></i>
                                    </td>
                                `;
                tbody.appendChild(row);
            });
        }

        async function saveRoom() {
            const roomId = document.getElementById('roomId').value;
            const roomData = {
                id: roomId ? parseInt(roomId, 10) : null,
                name: document.getElementById('roomName').value,
                style: document.getElementById('roomStyle').value,
                capacity: parseInt(document.getElementById('roomCapacity').value, 10),
                status: document.getElementById('roomStatus').value,
                floor: parseInt(document.getElementById('roomFloor').value, 10),
            };

            const url = roomId ? `/api/rooms/${roomId}` : '/api/rooms';
            const method = roomId ? 'PUT' : 'POST';

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(roomData),
                });

                if (response.ok) {
                    fetchRooms();
                    alert('Room saved successfully');
                    document.querySelector('#addRoomCanvas .btn-close').click();
                } else {
                    const errorText = await response.text();
                    console.error('Failed to save room:', errorText);
                    alert(`Error saving room: ${errorText}`);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An unexpected error occurred.');
            }
        }

        function editRoom(id) {
            fetch(`/api/rooms/${id}`)
                .then(response => response.json())
                .then(room => {
                    document.getElementById('roomId').value = room.roomId;
                    document.getElementById('roomIdContainer').style.display = 'block';
                    document.getElementById('roomName').value = room.name;
                    document.getElementById('roomStyle').value = room.style;
                    document.getElementById('roomCapacity').value = room.capacity;
                    document.getElementById('roomStatus').value = room.status;
                    document.getElementById('roomFloor').value = room.floor;
                    document.getElementById('canvasTitle').textContent = 'Edit Room';

                    const addRoomCanvas = new bootstrap.Offcanvas(document.getElementById('addRoomCanvas'));
                    addRoomCanvas.show();
                })
                .catch(error => {
                    console.error('Error fetching room:', error);
                    alert('An error occurred while fetching room details.');
                });
        }

        async function deleteRoom(id) {
            if (!confirm('Are you sure you want to delete this room?')) return;

            try {
                const response = await fetch(`/api/rooms/${id}`, { method: 'DELETE' });
                if (response.ok) {
                    fetchRooms();
                    alert('Room deleted successfully');
                } else {
                    console.error('Failed to delete room');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function fetchBookedRooms() {
            try {
                const response = await fetch('/api/bookings/GetBookedRooms');
                if (response.ok) {
                    const bookedRooms = await response.json();
                    renderBookedRooms(bookedRooms);
                } else {
                    console.error('Failed to fetch booked rooms data');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function renderBookedRooms(bookedRooms) {
            const tableWrapper = document.querySelector('.admin-booked-section-table-wrapper:last-child'); // Ensure the correct table-wrapper is selected
            tableWrapper.innerHTML = ''; // Clear existing content

            if (bookedRooms.length === 0) {
                // Show "No Booked Rooms" message if there are no booked rooms
                tableWrapper.innerHTML = `<div class="text-center text-muted m-0 no-rooms-available-placeholder">
                        <p class="m-0 no-rooms-available-placeholder-label">No Booked Rooms Currently</p>
                        </div>`;
                return;
            }

            // If there are booked rooms, render the table
            const tableHTML = `
                        <table class="table table-striped align-middle" id="adminBookedTable">
                            <thead>
                                <tr>
                                    <th scope="col">Room</th>
                                    <th scope="col">User</th>
                                    <th scope="col">No. of People</th>
                                    <th scope="col">Date Booked</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${bookedRooms
                    .map(
                        (booked) => `
                                        <tr>
                                            <td>${booked.roomName}</td>
                                            <td>${booked.userName}</td>
                                            <td>${booked.noOfPeople}</td>
                                            <td>${new Date(booked.startDate).toLocaleDateString()}</td>
                                            <td>
                                                <i class="bi bi-pencil-square" onclick="editBookedRoom(${booked.bookingId})"></i>
                                                <i class="bi bi-trash3 ms-2" onclick="deleteBookedRoom(${booked.bookingId})"></i>
                                            </td>
                                        </tr>
                                    `
                    )
                    .join('')}
                            </tbody>
                        </table>
                    `;
            tableWrapper.innerHTML = tableHTML;
        }

        function editBookedRoom(id) {
            fetch(`/api/bookings/GetBookedRoomById/${id}`)
                .then(response => response.json())
                .then(bookedRoom => {
                    document.getElementById('roomId').value = bookedRoom.roomId;
                    document.getElementById('roomName').value = bookedRoom.roomName;
                    document.getElementById('roomStyle').value = bookedRoom.style;
                    document.getElementById('roomCapacity').value = bookedRoom.noOfPeople;
                    document.getElementById('roomStatus').value = bookedRoom.status;
                    document.getElementById('roomFloor').value = bookedRoom.floor;

                    const addRoomCanvas = new bootstrap.Offcanvas(document.getElementById('addRoomCanvas'));
                    addRoomCanvas.show();
                })
                .catch(error => {
                    console.error('Error fetching booked room:', error);
                    alert('An error occurred while fetching booked room details.');
                });
        }

        async function deleteBookedRoom(id) {
            if (!confirm('Are you sure you want to delete this booking?')) return;

            try {
                const response = await fetch(`/api/bookings/DeleteBookedRoom/${id}`, { method: 'DELETE' });
                if (response.ok) {
                    fetchBookedRooms();
                    alert('Booked room deleted successfully');
                } else {
                    console.error('Failed to delete booked room');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function updateRoomImage() {
            const roomStyle = document.getElementById('roomStyle').value;
            const roomImage = document.getElementById('roomImage');
            const roomImagePreview = document.getElementById('roomImagePreview');

            // Map room styles to their corresponding image paths
            const styleToImageMap = {
                "Classroom": "/img/classroomStyle.jpg",
                "Banquet": "/img/banquet.jpg",
                "U-Shape": "/img/ushape.jpeg",
                "Conference": "/img/conferenceStyle.png",
                "Auditorium": "/img/auditorium.jpg",
                "Boardroom": "/img/boardroomStyle.jpeg",
            };

            // Assign the image based on the selected style
            const imagePath = styleToImageMap[roomStyle] || ""; // Default to an empty path if not found
            if (imagePath) {
                roomImage.src = imagePath;
                roomImage.style.display = "block"; // Show the image
            } else {
                roomImage.style.display = "none"; // Hide the image if no style is selected
            }
        }

    </script>
</body>
</html>
